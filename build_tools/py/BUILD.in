package(default_visibility = ["//visibility:public"])

load("@bazel_skylib//:bzl_library.bzl", "bzl_library")
load("//build_tools/py:py.bzl", "dbx_internal_bootstrap_py_binary", "dbx_py_binary")
load("//build_tools/sh:sh.bzl", "dbx_sh_binary")

py_binary(
    name = "blank_py_binary",
    srcs = ["blank_py_binary.py"],
)

sh_binary(
    name = "ldshared-wrapper",
    srcs = ["ldshared-wrapper.sh"],
)

dbx_py_binary(
    name = "vpip",
    data = [
        ":ldshared-wrapper",
        ":sanitizer-extra-runfiles",
        "@io_pypa_pip_whl//file",
        "@io_pypa_setuptools_whl//file",
        "@io_pypa_wheel_whl//file",
        # Directly use git, rather than //thirdparty/git:git to
        # avoid a circular dependency
        # Uncomment this if you need git features of pip for manual
        # testing of an unreleased build.
        # "@com_git_scm_git//:executables",
    ],
    main = "vpip.py",
)

py_binary(
    name = "vinst",
    srcs = ["vinst.py"],
    python_version = "PY3",
)

py_binary(
    name = "check_conflicts",
    srcs = ["check_conflicts.py"],
    python_version = "PY3",
)

dbx_py_binary(
    name = "build_tar",
    srcs = [
        "archive.py",
        "build_tar.py",
        "helpers.py",
    ],
    main = "build_tar.py",
)

filegroup(
    name = "sanitizer-extra-runfiles",
    srcs = select({
        "//build_tools:use-asan": [
            ":asan-suppressions.txt",
        ],
        "//conditions:default": [],
    }),
    visibility = ["//visibility:public"],
)

dbx_internal_bootstrap_py_binary(
    name = "py3_compile",
    srcs = ["py3_compile.py"],
    main = "py3_compile.py",
    deps = ["//build_tools/bzl_lib:cfg"],
)

toolchain_type(
    name = "toolchain_38",
)

toolchain_type(
    name = "toolchain_39",
)

toolchain_type(
    name = "toolchain_310",
)

toolchain_type(
    name = "mypy_toolchain_38",
)

toolchain_type(
    name = "mypy_toolchain_39",
)

toolchain_type(
    name = "mypy_toolchain_310",
)

bzl_library(
    name = "py_bzl",
    srcs = glob([
        "*.bzl",
    ]),
    deps = [
        "//build_tools/bazel:bazel_bzl",
        "//build_tools/windows:windows_bzl",
    ],
)

exports_files(["import_check.py"])

dbx_sh_binary(
    name = "rustc",
    srcs = ["rustc.sh"],
)
