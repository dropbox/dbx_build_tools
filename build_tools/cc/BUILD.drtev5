load("@dbx_build_tools//build_tools/cc:drte.bzl", "drte_toolchain_config")

filegroup(
    name = "everything",
    srcs = glob(
        ["root/**"],
        exclude = [
            "root/**/*.map",
            "root/lib/gcc/x86_64-linux-gnu/11.3.0/plugin/**",
            "root/lib64/gconv/**",
            "root/lib64/locale/**",
        ],
    ) + [":wrap-gcc"],
)

filegroup(name = "empty")

filegroup(
    name = "bin",
    srcs = glob([
        "root/bin/*",
        "root/libexec/**",
        "root/x86_64-linux-gnu/**",
    ]),
)

filegroup(
    name = "compiler-files",
    srcs = glob(
        [
            "root/include/**",
            "root/lib/**",
        ],
        exclude = ["root/lib/gcc/x86_64-linux-gnu/11.3.0/plugin/**"],
    ) + [":bin"],
)

filegroup(
    name = "linker-files",
    srcs = glob(
        [
            "root/lib/**",
            "root/lib64/*",
        ],
        exclude = [
            "root/**/*.map",
            "root/lib/gcc/x86_64-linux-gnu/11.3.0/plugin/**",
            "root/lib64/gconv/**",
            "root/lib64/locale/**",
        ],
    ) + [":bin"],
)

config_setting(
    name = "cuda_compiler",
    values = {"compiler": "cuda"},
)

filegroup(
    name = "wrap-gcc",
    srcs = glob(["root/**"]) + select({
        ":cuda_compiler": [
            "@cuda//:wrap_gcc",
            "@cuda//cuda:everything",
        ],
        "//conditions:default": [],
    }),
)

filegroup(
    name = "compiler-files-cuda",
    srcs = [
        ":compiler-files",
        ":wrap-gcc",
    ],
)

filegroup(
    name = "linker-files-cuda",
    srcs = [
        ":linker-files",
        ":wrap-gcc",
    ],
)

drte_toolchain_config(
    name = "drte-v5-config",
    builtin_include_directories = [
        "%crosstool_top%/root/include",
        "%crosstool_top%/root/lib/gcc/x86_64-linux-gnu/11.3.0/include",
        "%crosstool_top%/root/lib/gcc/x86_64-linux-gnu/11.3.0/include-fixed",
    ],
    builtin_sysroot = "external/drte_v5_build_sysroot/root",
    compiler = "compiler",
    rtld = "/usr/drte/v5/lib64/ld-linux-x86-64.so.2",
    toolchain_identifier = "local",
)

drte_toolchain_config(
    name = "drte-v5-cuda-config",
    builtin_include_directories = [
        "%crosstool_top%/root/include",
        "%crosstool_top%/root/lib/gcc/x86_64-linux-gnu/11.3.0/include",
        "%crosstool_top%/root/lib/gcc/x86_64-linux-gnu/11.3.0/include-fixed",
        # For some reason, gcc emits absolute paths for some headers to depfiles when
        # called indirectly by nvcc (via cuda_wrap_gcc). Perhaps this is because nvcc
        # outputs the intermediate C++ source to a temporary directory. I can't
        # figure out any combination of command line options that causes gcc to
        # correctly emit relative paths, as it does when called directly.
        # Work around by including both relative and absolute paths here.
        "%{crosstool_top_absolute}/root/include",
        "%{crosstool_top_absolute}/root/lib/gcc/x86_64-linux-gnu/11.3.0/include",
        "%{crosstool_top_absolute}/root/lib/gcc/x86_64-linux-gnu/11.3.0/include-fixed",
        "%workspace%/external/cuda/cuda/cuda/include",
        "%{workspace_absolute}/external/cuda/cuda/cuda/include",
    ],
    builtin_sysroot = "external/drte_v5_build_sysroot/root",
    compiler = "cuda",
    rtld = "/usr/drte/v5/lib64/ld-linux-x86-64.so.2",
    toolchain_identifier = "cuda",
)

cc_toolchain(
    name = "drte-v5-gcc-11.3.0",
    all_files = ":everything",
    ar_files = ":bin",
    as_files = ":compiler-files",
    compiler_files = ":compiler-files",
    dwp_files = ":bin",
    linker_files = ":linker-files",
    objcopy_files = ":empty",
    strip_files = ":bin",
    supports_param_files = True,
    toolchain_config = ":drte-v5-config",
    toolchain_identifier = "local",
    visibility = ["//visibility:public"],
)

cc_toolchain(
    name = "drte-v5-gcc-11.3.0-cuda",
    all_files = ":everything",
    ar_files = ":bin",
    as_files = ":compiler-files-cuda",
    compiler_files = ":compiler-files-cuda",
    dwp_files = ":bin",
    linker_files = ":linker-files-cuda",
    objcopy_files = ":empty",
    strip_files = ":bin",
    supports_param_files = True,
    toolchain_config = ":drte-v5-cuda-config",
    toolchain_identifier = "cuda",
    visibility = ["//visibility:public"],
)

cc_toolchain_suite(
    name = "drte-v5",
    toolchains = {
        "k8": ":drte-v5-gcc-11.3.0",
        "k8|cuda": ":drte-v5-gcc-11.3.0-cuda",
    },
    visibility = ["//visibility:public"],
)
