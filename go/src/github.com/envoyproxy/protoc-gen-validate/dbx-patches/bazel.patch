diff -ruN 1/bazel/BUILD.in 2/bazel/BUILD.in
--- 1/bazel/BUILD.in	1970-01-01 00:00:00.000000000 +0000
+++ 2/bazel/BUILD.in	2023-08-08 23:18:25.186495496 +0000
@@ -0,0 +1,13 @@
+load("@bazel_skylib//rules:common_settings.bzl", "string_flag")
+
+config_setting(
+    name = "windows_x86_64",
+    values = {"cpu": "x64_windows"},
+    visibility = ["//visibility:public"],
+)
+
+string_flag(
+    name = "template-flavor",
+    build_setting_default = "",
+    visibility = ["//visibility:public"],
+)
diff -ruN 1/bazel/go/BUILD 2/bazel/go/BUILD
--- 1/bazel/go/BUILD	2023-08-08 23:12:25.220240405 +0000
+++ 2/bazel/go/BUILD	1970-01-01 00:00:00.000000000 +0000
@@ -1,20 +0,0 @@
-"""Define our protoc plugin in a rule that can be provided to go_proto_library#compilers
-
-This is in a separate BUILD file from /bazel/BUILD to avoid a dependency on rules_go for all users who load from it.
-
-If you use Gazelle, you can use a directive so that the pgv_plugin_go is automatically added to generated go_proto_library rules.
-See https://github.com/bazelbuild/bazel-gazelle#directives
-
-For example, in some/BUILD.bazel:
-# gazelle:go_grpc_compilers @com_envoyproxy_protoc_gen_validate//bazel/go:pgv_plugin_go, @io_bazel_rules_go//proto:go_grpc
-"""
-load("@io_bazel_rules_go//proto:compiler.bzl", "go_proto_compiler")
-
-go_proto_compiler(
-    name = "pgv_plugin_go",
-    suffix = ".pb.validate.go",
-    valid_archive = False,
-    plugin = "@com_envoyproxy_protoc_gen_validate//:protoc-gen-validate",
-    options = ["lang=go"],
-    visibility = ["//visibility:public"],
-)
diff -ruN 1/bazel/pgv_proto_library.bzl 2/bazel/pgv_proto_library.bzl
--- 1/bazel/pgv_proto_library.bzl	2023-08-08 23:12:25.224240340 +0000
+++ 2/bazel/pgv_proto_library.bzl	1970-01-01 00:00:00.000000000 +0000
@@ -1,60 +0,0 @@
-load("@io_bazel_rules_go//proto:def.bzl", "go_proto_library")
-load("@rules_cc//cc:defs.bzl", "cc_library")
-load(":protobuf.bzl", "cc_proto_gen_validate", "java_proto_gen_validate")
-
-_DEFAULT_GO_PROTOC = ["@io_bazel_rules_go//proto:go_proto"]
-
-def pgv_go_proto_library(name, compilers = _DEFAULT_GO_PROTOC, proto = None, deps = [], **kwargs):
-    go_proto_library(
-        name = name,
-        proto = proto,
-        deps = ["@com_envoyproxy_protoc_gen_validate//validate:validate"] + deps,
-        compilers = compilers + [
-            "@com_envoyproxy_protoc_gen_validate//bazel/go:pgv_plugin_go",
-        ],
-        visibility = ["//visibility:public"],
-        **kwargs
-    )
-
-def pgv_cc_proto_library(
-        name,
-        deps = [],
-        cc_deps = [],
-        copts = [],
-        **kargs):
-    """Bazel rule to create a C++ protobuf validation library from proto source files
-    Args:
-      name: the name of the pgv_cc_proto_library.
-      deps: proto_library rules that contains the necessary .proto files.
-      cc_deps: C++ dependencies of the protos being compiled. Likely cc_proto_library or pgv_cc_proto_library
-      **kargs: other keyword arguments that are passed to cc_library.
-    """
-
-    native.cc_proto_library(
-        name = name + "_cc_proto",
-        deps = deps,
-    )
-    cc_proto_gen_validate(
-        name = name + "_validate",
-        deps = deps,
-    )
-    cc_library(
-        name = name,
-        hdrs = [":" + name + "_validate"],
-        srcs = [":" + name + "_validate"],
-        deps = cc_deps + [
-            ":" + name + "_cc_proto",
-            "@com_envoyproxy_protoc_gen_validate//validate:cc_validate",
-            "@com_envoyproxy_protoc_gen_validate//validate:validate_cc",
-            "@com_google_protobuf//:protobuf",
-            "@com_googlesource_code_re2//:re2",
-        ],
-        copts = copts + select({
-            "@com_envoyproxy_protoc_gen_validate//bazel:windows_x86_64": ["-DWIN32"],
-            "//conditions:default": [],
-        }),
-        alwayslink = 1,
-        **kargs
-    )
-
-pgv_java_proto_library = java_proto_gen_validate
diff -ruN 1/example-workspace/.bazelrc 2/example-workspace/.bazelrc
--- 1/example-workspace/.bazelrc	2023-08-08 23:12:25.260239764 +0000
+++ 2/example-workspace/.bazelrc	1970-01-01 00:00:00.000000000 +0000
@@ -1 +0,0 @@
-build --incompatible_use_cc_configure_from_rules_cc
diff -ruN 1/example-workspace/BUILD 2/example-workspace/BUILD
--- 1/example-workspace/BUILD	2023-08-08 23:12:25.264239701 +0000
+++ 2/example-workspace/BUILD	1970-01-01 00:00:00.000000000 +0000
@@ -1,70 +0,0 @@
-# Example C++ binary that uses the generated validation code.
-#
-# This binary attempts to read files named on the command line as binary protos.
-# To try it out, first use Bazel to build this binary:
-#
-#   bazel build //:example_cc
-#
-# Now run it on some files. From the repository root directory:
-#
-#   bazel run //:example_cc -- $(pwd)/example.cc
-#
-# The binary will fail because example.cc is not a valid textproto. Luckily
-# this directory contains two textprotos already: valid.textproto and
-# invalid.textproto. From the root directory:
-#
-#   bazel run //:example_cc -- $(pwd)/valid.textproto
-#
-# which succeeds, or
-#
-#   bazel run //:example_cc -- $(pwd)/invalid.textproto
-#
-# which fails.
-cc_binary(
-    name = "example_cc",
-    srcs = ["example.cc"],
-    deps = ["//foo:bar_cc_proto"],
-)
-
-# Example python binary that uses the dynamic python validation code.
-#
-# Exactly as example_cc above except different label. Example:
-#
-# bazel run //:example_py -- $(pwd)/valid.textproto
-
-py_binary(
-    name = "example_py",
-    srcs = ["example.py"],
-    main = "example.py",
-    srcs_version = "PY3",
-    deps = [
-        "@com_google_protobuf//:protobuf_python",
-        "@com_envoyproxy_protoc_gen_validate//python:validator_py",
-        "//foo:bar_py_proto",
-    ],
-)
-
-# Test that the example textproto inputs evoke the right responses.
-[
-    sh_test(
-        name = "example_{lang}_test_{which}".format(lang=lang, which=which),
-        srcs = ["example_test.sh"],
-        args = [
-            "$(location :example_{lang})".format(lang=lang),
-            str(code),
-            "$(location :{which})".format(which=which),
-        ],
-        data = [
-            which,
-            ":example_{lang}".format(lang=lang),
-        ],
-    )
-    for lang in (
-        "cc",
-        "py",
-    )
-    for (which, code) in (
-        ("valid.textproto", 0),
-        ("invalid.textproto", 1),
-    )
-]
diff -ruN 1/example-workspace/WORKSPACE 2/example-workspace/WORKSPACE
--- 1/example-workspace/WORKSPACE	2023-08-08 23:12:25.264239701 +0000
+++ 2/example-workspace/WORKSPACE	1970-01-01 00:00:00.000000000 +0000
@@ -1,26 +0,0 @@
-# Initialize this as a self-contained Bazel workspace.
-workspace(name = "pgv_example")
-
-# Declare the protoc-gen-validate repository as an external dependency.
-# This uses a local_repository declaration because this workspace is part of
-# the same Git repository. External repositories should declare PGV as a
-# dependency using http_repository pointed at the PGV GitHub repository.
-local_repository(
-    name = "com_envoyproxy_protoc_gen_validate",
-    path = "../",
-)
-
-# Load the dependencies of PGV. This is required for the next step to work.
-load("@com_envoyproxy_protoc_gen_validate//bazel:repositories.bzl", "pgv_dependencies")
-
-pgv_dependencies()
-
-# Perform any necessary actions to initialize dependencies.
-load("@com_envoyproxy_protoc_gen_validate//bazel:dependency_imports.bzl", "pgv_dependency_imports")
-
-pgv_dependency_imports()
-
-load("@com_envoyproxy_protoc_gen_validate//:dependencies.bzl", "go_third_party")
-
-# gazelle:repository_macro dependencies.bzl%go_third_party
-go_third_party()
diff -ruN 1/example-workspace/dependencies.bzl 2/example-workspace/dependencies.bzl
--- 1/example-workspace/dependencies.bzl	2023-08-08 23:12:25.268239638 +0000
+++ 2/example-workspace/dependencies.bzl	1970-01-01 00:00:00.000000000 +0000
@@ -1,492 +0,0 @@
-load("@bazel_gazelle//:deps.bzl", "go_repository")
-
-def go_third_party():
-    go_repository(
-        name = "co_honnef_go_tools",
-        importpath = "honnef.co/go/tools",
-        sum = "h1:UoveltGrhghAA7ePc+e+QYDHXrBps2PqFZiHkGR/xK8=",
-        version = "v0.0.1-2020.1.4",
-    )
-    go_repository(
-        name = "com_github_burntsushi_toml",
-        importpath = "github.com/BurntSushi/toml",
-        sum = "h1:WXkYYl6Yr3qBf1K79EBnL4mak0OimBfB0XUf9Vl28OQ=",
-        version = "v0.3.1",
-    )
-    go_repository(
-        name = "com_github_burntsushi_xgb",
-        importpath = "github.com/BurntSushi/xgb",
-        sum = "h1:1BDTz0u9nC3//pOCMdNH+CiXJVYJh5UQNCOBG7jbELc=",
-        version = "v0.0.0-20160522181843-27f122750802",
-    )
-    go_repository(
-        name = "com_github_census_instrumentation_opencensus_proto",
-        importpath = "github.com/census-instrumentation/opencensus-proto",
-        sum = "h1:glEXhBS5PSLLv4IXzLA5yPRVX4bilULVyxxbrfOtDAk=",
-        version = "v0.2.1",
-    )
-    go_repository(
-        name = "com_github_chzyer_logex",
-        importpath = "github.com/chzyer/logex",
-        sum = "h1:Swpa1K6QvQznwJRcfTfQJmTE72DqScAa40E+fbHEXEE=",
-        version = "v1.1.10",
-    )
-    go_repository(
-        name = "com_github_chzyer_readline",
-        importpath = "github.com/chzyer/readline",
-        sum = "h1:fY5BOSpyZCqRo5OhCuC+XN+r/bBCmeuuJtjz+bCNIf8=",
-        version = "v0.0.0-20180603132655-2972be24d48e",
-    )
-    go_repository(
-        name = "com_github_chzyer_test",
-        importpath = "github.com/chzyer/test",
-        sum = "h1:q763qf9huN11kDQavWsoZXJNW3xEE4JJyHa5Q25/sd8=",
-        version = "v0.0.0-20180213035817-a1ea475d72b1",
-    )
-    go_repository(
-        name = "com_github_client9_misspell",
-        importpath = "github.com/client9/misspell",
-        sum = "h1:ta993UF76GwbvJcIo3Y68y/M3WxlpEHPWIGDkJYwzJI=",
-        version = "v0.3.4",
-    )
-    go_repository(
-        name = "com_github_cncf_udpa_go",
-        importpath = "github.com/cncf/udpa/go",
-        sum = "h1:cqQfy1jclcSy/FwLjemeg3SR1yaINm74aQyupQ0Bl8M=",
-        version = "v0.0.0-20201120205902-5459f2c99403",
-    )
-
-    go_repository(
-        name = "com_github_davecgh_go_spew",
-        importpath = "github.com/davecgh/go-spew",
-        sum = "h1:ZDRjVQ15GmhC3fiQ8ni8+OwkZQO4DARzQgrnXU1Liz8=",
-        version = "v1.1.0",
-    )
-    go_repository(
-        name = "com_github_envoyproxy_go_control_plane",
-        importpath = "github.com/envoyproxy/go-control-plane",
-        sum = "h1:EmNYJhPYy0pOFjCx2PrgtaBXmee0iUX9hLlxE1xHOJE=",
-        version = "v0.9.9-0.20201210154907-fd9021fe5dad",
-    )
-    go_repository(
-        name = "com_github_go_gl_glfw",
-        importpath = "github.com/go-gl/glfw",
-        sum = "h1:QbL/5oDUmRBzO9/Z7Seo6zf912W/a6Sr4Eu0G/3Jho0=",
-        version = "v0.0.0-20190409004039-e6da0acd62b1",
-    )
-    go_repository(
-        name = "com_github_go_gl_glfw_v3_3_glfw",
-        importpath = "github.com/go-gl/glfw/v3.3/glfw",
-        sum = "h1:WtGNWLvXpe6ZudgnXrq0barxBImvnnJoMEhXAzcbM0I=",
-        version = "v0.0.0-20200222043503-6f7a984d4dc4",
-    )
-    go_repository(
-        name = "com_github_golang_glog",
-        importpath = "github.com/golang/glog",
-        sum = "h1:VKtxabqXZkF25pY9ekfRL6a582T4P37/31XEstQ5p58=",
-        version = "v0.0.0-20160126235308-23def4e6c14b",
-    )
-    go_repository(
-        name = "com_github_golang_groupcache",
-        importpath = "github.com/golang/groupcache",
-        sum = "h1:1r7pUrabqp18hOBcwBwiTsbnFeTZHV9eER/QT5JVZxY=",
-        version = "v0.0.0-20200121045136-8c9f03a8e57e",
-    )
-    go_repository(
-        name = "com_github_golang_mock",
-        importpath = "github.com/golang/mock",
-        sum = "h1:l75CXGRSwbaYNpl/Z2X1XIIAMSCquvXgpVZDhwEIJsc=",
-        version = "v1.4.4",
-    )
-
-    go_repository(
-        name = "com_github_golang_protobuf",
-        importpath = "github.com/golang/protobuf",
-        sum = "h1:ROPKBNFfQgOUMifHyP+KYbvpjbdoFNs+aK7DXlji0Tw=",
-        version = "v1.5.2",
-    )
-    go_repository(
-        name = "com_github_google_btree",
-        importpath = "github.com/google/btree",
-        sum = "h1:0udJVsspx3VBr5FwtLhQQtuAsVc79tTq0ocGIPAU6qo=",
-        version = "v1.0.0",
-    )
-
-    go_repository(
-        name = "com_github_google_go_cmp",
-        importpath = "github.com/google/go-cmp",
-        sum = "h1:Khx7svrCpmxxtHBq5j2mp/xVjsi8hQMfNLvJFAlrGgU=",
-        version = "v0.5.5",
-    )
-    go_repository(
-        name = "com_github_google_martian",
-        importpath = "github.com/google/martian",
-        sum = "h1:/CP5g8u/VJHijgedC/Legn3BAbAaWPgecwXBIDzw5no=",
-        version = "v2.1.0+incompatible",
-    )
-    go_repository(
-        name = "com_github_google_martian_v3",
-        importpath = "github.com/google/martian/v3",
-        sum = "h1:wCKgOCHuUEVfsaQLpPSJb7VdYCdTVZQAuOdYm1yc/60=",
-        version = "v3.1.0",
-    )
-    go_repository(
-        name = "com_github_google_pprof",
-        importpath = "github.com/google/pprof",
-        sum = "h1:LR89qFljJ48s990kEKGsk213yIJDPI4205OKOzbURK8=",
-        version = "v0.0.0-20201218002935-b9804c9f04c2",
-    )
-    go_repository(
-        name = "com_github_google_renameio",
-        importpath = "github.com/google/renameio",
-        sum = "h1:GOZbcHa3HfsPKPlmyPyN2KEohoMXOhdMbHrvbpl2QaA=",
-        version = "v0.1.0",
-    )
-    go_repository(
-        name = "com_github_google_uuid",
-        importpath = "github.com/google/uuid",
-        sum = "h1:EVhdT+1Kseyi1/pUmXKaFxYsDNy9RQYkMWRH68J/W7Y=",
-        version = "v1.1.2",
-    )
-    go_repository(
-        name = "com_github_googleapis_gax_go_v2",
-        importpath = "github.com/googleapis/gax-go/v2",
-        sum = "h1:sjZBwGj9Jlw33ImPtvFviGYvseOtDM7hkSKB7+Tv3SM=",
-        version = "v2.0.5",
-    )
-    go_repository(
-        name = "com_github_googleapis_google_cloud_go_testing",
-        importpath = "github.com/googleapis/google-cloud-go-testing",
-        sum = "h1:tlyzajkF3030q6M8SvmJSemC9DTHL/xaMa18b65+JM4=",
-        version = "v0.0.0-20200911160855-bcd43fbb19e8",
-    )
-    go_repository(
-        name = "com_github_hashicorp_golang_lru",
-        importpath = "github.com/hashicorp/golang-lru",
-        sum = "h1:0hERBMJE1eitiLkihrMvRVBYAkpHzc/J3QdDN+dAcgU=",
-        version = "v0.5.1",
-    )
-
-    go_repository(
-        name = "com_github_iancoleman_strcase",
-        importpath = "github.com/iancoleman/strcase",
-        sum = "h1:05I4QRnGpI0m37iZQRuskXh+w77mr6Z41lwQzuHLwW0=",
-        version = "v0.2.0",
-    )
-    go_repository(
-        name = "com_github_ianlancetaylor_demangle",
-        importpath = "github.com/ianlancetaylor/demangle",
-        sum = "h1:mV02weKRL81bEnm8A0HT1/CAelMQDBuQIfLw8n+d6xI=",
-        version = "v0.0.0-20200824232613-28f6c0f3b639",
-    )
-    go_repository(
-        name = "com_github_jstemmer_go_junit_report",
-        importpath = "github.com/jstemmer/go-junit-report",
-        sum = "h1:6QPYqodiu3GuPL+7mfx+NwDdp2eTkp9IfEUpgAwUN0o=",
-        version = "v0.9.1",
-    )
-    go_repository(
-        name = "com_github_kisielk_gotool",
-        importpath = "github.com/kisielk/gotool",
-        sum = "h1:AV2c/EiW3KqPNT9ZKl07ehoAGi4C5/01Cfbblndcapg=",
-        version = "v1.0.0",
-    )
-
-    go_repository(
-        name = "com_github_kr_fs",
-        importpath = "github.com/kr/fs",
-        sum = "h1:Jskdu9ieNAYnjxsi0LbQp1ulIKZV1LAFgK1tWhpZgl8=",
-        version = "v0.1.0",
-    )
-    go_repository(
-        name = "com_github_kr_pretty",
-        importpath = "github.com/kr/pretty",
-        sum = "h1:L/CwN0zerZDmRFUapSPitk6f+Q3+0za1rQkzVuMiMFI=",
-        version = "v0.1.0",
-    )
-    go_repository(
-        name = "com_github_kr_pty",
-        importpath = "github.com/kr/pty",
-        sum = "h1:VkoXIwSboBpnk99O/KFauAEILuNHv5DVFKZMBN/gUgw=",
-        version = "v1.1.1",
-    )
-    go_repository(
-        name = "com_github_kr_text",
-        importpath = "github.com/kr/text",
-        sum = "h1:45sCR5RtlFHMR4UwH9sdQ5TC8v0qDQCHnXt+kaKSTVE=",
-        version = "v0.1.0",
-    )
-
-    go_repository(
-        name = "com_github_lyft_protoc_gen_star_v2",
-        importpath = "github.com/lyft/protoc-gen-star/v2",
-        sum = "h1:erE0rdztuaDq3bpGifD95wfoPrSZc95nGA6tbiNYh6M=",
-        version = "v0.6.1",
-    )
-    go_repository(
-        name = "com_github_pkg_errors",
-        importpath = "github.com/pkg/errors",
-        sum = "h1:FEBLx1zS214owpjy7qsBeixbURkuhQAwrK5UwLGTwt4=",
-        version = "v0.9.1",
-    )
-    go_repository(
-        name = "com_github_pkg_sftp",
-        importpath = "github.com/pkg/sftp",
-        sum = "h1:I2qBYMChEhIjOgazfJmV3/mZM256btk6wkCDRmW7JYs=",
-        version = "v1.13.1",
-    )
-    go_repository(
-        name = "com_github_pmezard_go_difflib",
-        importpath = "github.com/pmezard/go-difflib",
-        sum = "h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=",
-        version = "v1.0.0",
-    )
-    go_repository(
-        name = "com_github_prometheus_client_model",
-        importpath = "github.com/prometheus/client_model",
-        sum = "h1:gQz4mCbXsO+nc9n1hCxHcGA3Zx3Eo+UHZoInFGUIXNM=",
-        version = "v0.0.0-20190812154241-14fe0d1b01d4",
-    )
-    go_repository(
-        name = "com_github_rogpeppe_go_internal",
-        importpath = "github.com/rogpeppe/go-internal",
-        sum = "h1:RR9dF3JtopPvtkroDZuVD7qquD0bnHlKSqaQhgwt8yk=",
-        version = "v1.3.0",
-    )
-
-    go_repository(
-        name = "com_github_spf13_afero",
-        importpath = "github.com/spf13/afero",
-        sum = "h1:j49Hj62F0n+DaZ1dDCvhABaPNSGNkt32oRFxI33IEMw=",
-        version = "v1.9.2",
-    )
-    go_repository(
-        name = "com_github_stretchr_objx",
-        importpath = "github.com/stretchr/objx",
-        sum = "h1:4G4v2dO3VZwixGIRoQ5Lfboy6nUhCyYzaqnIAPPhYs4=",
-        version = "v0.1.0",
-    )
-    go_repository(
-        name = "com_github_stretchr_testify",
-        importpath = "github.com/stretchr/testify",
-        sum = "h1:nwc3DEeHmmLAfoZucVR881uASk0Mfjw8xYJ99tb5CcY=",
-        version = "v1.7.0",
-    )
-    go_repository(
-        name = "com_github_yuin_goldmark",
-        importpath = "github.com/yuin/goldmark",
-        sum = "h1:fVcFKWvrslecOb/tg+Cc05dkeYx540o0FuFt3nUVDoE=",
-        version = "v1.4.13",
-    )
-    go_repository(
-        name = "com_google_cloud_go",
-        importpath = "cloud.google.com/go",
-        sum = "h1:XgtDnVJRCPEUG21gjFiRPz4zI1Mjg16R+NYQjfmU4XY=",
-        version = "v0.75.0",
-    )
-    go_repository(
-        name = "com_google_cloud_go_bigquery",
-        importpath = "cloud.google.com/go/bigquery",
-        sum = "h1:PQcPefKFdaIzjQFbiyOgAqyx8q5djaE7x9Sqe712DPA=",
-        version = "v1.8.0",
-    )
-    go_repository(
-        name = "com_google_cloud_go_datastore",
-        importpath = "cloud.google.com/go/datastore",
-        sum = "h1:/May9ojXjRkPBNVrq+oWLqmWCkr4OU5uRY29bu0mRyQ=",
-        version = "v1.1.0",
-    )
-    go_repository(
-        name = "com_google_cloud_go_pubsub",
-        importpath = "cloud.google.com/go/pubsub",
-        sum = "h1:ukjixP1wl0LpnZ6LWtZJ0mX5tBmjp1f8Sqer8Z2OMUU=",
-        version = "v1.3.1",
-    )
-    go_repository(
-        name = "com_google_cloud_go_storage",
-        importpath = "cloud.google.com/go/storage",
-        sum = "h1:6RRlFMv1omScs6iq2hfE3IvgE+l6RfJPampq8UZc5TU=",
-        version = "v1.14.0",
-    )
-    go_repository(
-        name = "com_shuralyov_dmitri_gpu_mtl",
-        importpath = "dmitri.shuralyov.com/gpu/mtl",
-        sum = "h1:VpgP7xuJadIUuKccphEpTJnWhS2jkQyMt6Y7pJCD7fY=",
-        version = "v0.0.0-20190408044501-666a987793e9",
-    )
-
-    go_repository(
-        name = "in_gopkg_check_v1",
-        importpath = "gopkg.in/check.v1",
-        sum = "h1:qIbj1fsPNlZgppZ+VLlY7N33q108Sa+fhmuc+sWQYwY=",
-        version = "v1.0.0-20180628173108-788fd7840127",
-    )
-    go_repository(
-        name = "in_gopkg_errgo_v2",
-        importpath = "gopkg.in/errgo.v2",
-        sum = "h1:0vLT13EuvQ0hNvakwLuFZ/jYrLp5F3kcWHXdRggjCE8=",
-        version = "v2.1.0",
-    )
-
-    go_repository(
-        name = "in_gopkg_yaml_v2",
-        importpath = "gopkg.in/yaml.v2",
-        sum = "h1:ZCJp+EgiOT7lHqUV2J862kp8Qj64Jo6az82+3Td9dZw=",
-        version = "v2.2.2",
-    )
-    go_repository(
-        name = "in_gopkg_yaml_v3",
-        importpath = "gopkg.in/yaml.v3",
-        sum = "h1:dUUwHk2QECo/6vqA44rthZ8ie2QXMNeKRTHCNY2nXvo=",
-        version = "v3.0.0-20200313102051-9f266ea9e77c",
-    )
-    go_repository(
-        name = "io_opencensus_go",
-        importpath = "go.opencensus.io",
-        sum = "h1:dntmOdLpSpHlVqbW5Eay97DelsZHe+55D+xC6i0dDS0=",
-        version = "v0.22.5",
-    )
-    go_repository(
-        name = "io_rsc_binaryregexp",
-        importpath = "rsc.io/binaryregexp",
-        sum = "h1:HfqmD5MEmC0zvwBuF187nq9mdnXjXsSivRiXN7SmRkE=",
-        version = "v0.2.0",
-    )
-    go_repository(
-        name = "io_rsc_quote_v3",
-        importpath = "rsc.io/quote/v3",
-        sum = "h1:9JKUTTIUgS6kzR9mK1YuGKv6Nl+DijDNIc0ghT58FaY=",
-        version = "v3.1.0",
-    )
-    go_repository(
-        name = "io_rsc_sampler",
-        importpath = "rsc.io/sampler",
-        sum = "h1:7uVkIFmeBqHfdjD+gZwtXXI+RODJ2Wc4O7MPEh/QiW4=",
-        version = "v1.3.0",
-    )
-    go_repository(
-        name = "org_golang_google_api",
-        importpath = "google.golang.org/api",
-        sum = "h1:uWrpz12dpVPn7cojP82mk02XDgTJLDPc2KbVTxrWb4A=",
-        version = "v0.40.0",
-    )
-    go_repository(
-        name = "org_golang_google_appengine",
-        importpath = "google.golang.org/appengine",
-        sum = "h1:FZR1q0exgwxzPzp/aF+VccGrSfxfPpkBqjIIEq3ru6c=",
-        version = "v1.6.7",
-    )
-    go_repository(
-        name = "org_golang_google_genproto",
-        importpath = "google.golang.org/genproto",
-        sum = "h1:PYBmACG+YEv8uQPW0r1kJj8tR+gkF0UWq7iFdUezwEw=",
-        version = "v0.0.0-20210226172003-ab064af71705",
-    )
-    go_repository(
-        name = "org_golang_google_grpc",
-        importpath = "google.golang.org/grpc",
-        sum = "h1:TwIQcH3es+MojMVojxxfQ3l3OF2KzlRxML2xZq0kRo8=",
-        version = "v1.35.0",
-    )
-
-    go_repository(
-        name = "org_golang_google_protobuf",
-        importpath = "google.golang.org/protobuf",
-        sum = "h1:kPPoIgf3TsEvrm0PFe15JQ+570QVxYzEvvHqChK+cng=",
-        version = "v1.30.0",
-    )
-    go_repository(
-        name = "org_golang_x_crypto",
-        importpath = "golang.org/x/crypto",
-        sum = "h1:idItI2DDfCokpg0N51B2VtiLdJ4vAuXC9fnCb2gACo4=",
-        version = "v0.0.0-20211108221036-ceb1ce70b4fa",
-    )
-    go_repository(
-        name = "org_golang_x_exp",
-        importpath = "golang.org/x/exp",
-        sum = "h1:QE6XYQK6naiK1EPAe1g/ILLxN5RBoH5xkJk3CqlMI/Y=",
-        version = "v0.0.0-20200224162631-6cc2880d07d6",
-    )
-    go_repository(
-        name = "org_golang_x_image",
-        importpath = "golang.org/x/image",
-        sum = "h1:+qEpEAPhDZ1o0x3tHzZTQDArnOixOzGD9HUJfcg0mb4=",
-        version = "v0.0.0-20190802002840-cff245a6509b",
-    )
-
-    go_repository(
-        name = "org_golang_x_lint",
-        importpath = "golang.org/x/lint",
-        sum = "h1:VLliZ0d+/avPrXXH+OakdXhpJuEoBZuwh1m2j7U6Iug=",
-        version = "v0.0.0-20210508222113-6edffad5e616",
-    )
-    go_repository(
-        name = "org_golang_x_mobile",
-        importpath = "golang.org/x/mobile",
-        sum = "h1:4+4C/Iv2U4fMZBiMCc98MG1In4gJY5YRhtpDNeDeHWs=",
-        version = "v0.0.0-20190719004257-d2bd2a29d028",
-    )
-
-    go_repository(
-        name = "org_golang_x_mod",
-        importpath = "golang.org/x/mod",
-        sum = "h1:6zppjxzCulZykYSLyVDYbneBfbaBIQPYMevg0bEwv2s=",
-        version = "v0.6.0-dev.0.20220419223038-86c51ed26bb4",
-    )
-    go_repository(
-        name = "org_golang_x_net",
-        importpath = "golang.org/x/net",
-        sum = "h1:1WGATo9HAhkWMbfyuVU0tEFP88OIkUvwaHFveQPvzCQ=",
-        version = "v0.0.0-20220907135653-1e95f45603a7",
-    )
-    go_repository(
-        name = "org_golang_x_oauth2",
-        importpath = "golang.org/x/oauth2",
-        sum = "h1:5vD4XjIc0X5+kHZjx4UecYdjA6mJo+XXNoaW0EjU5Os=",
-        version = "v0.0.0-20210218202405-ba52d332ba99",
-    )
-
-    go_repository(
-        name = "org_golang_x_sync",
-        importpath = "golang.org/x/sync",
-        sum = "h1:uVc8UZUe6tr40fFVnUP5Oj+veunVezqYl9z7DYw9xzw=",
-        version = "v0.0.0-20220722155255-886fb9371eb4",
-    )
-    go_repository(
-        name = "org_golang_x_sys",
-        importpath = "golang.org/x/sys",
-        sum = "h1:RoyzQTK76Rktm3p4xyZslc8T8I1tBz4UEjZCzeh57mM=",
-        version = "v0.0.0-20220908150016-7ac13a9a928d",
-    )
-    go_repository(
-        name = "org_golang_x_term",
-        importpath = "golang.org/x/term",
-        sum = "h1:JGgROgKl9N8DuW20oFS5gxc+lE67/N3FcwmBPMe7ArY=",
-        version = "v0.0.0-20210927222741-03fcf44c2211",
-    )
-
-    go_repository(
-        name = "org_golang_x_text",
-        importpath = "golang.org/x/text",
-        sum = "h1:olpwvP2KacW1ZWvsR7uQhoyTYvKAupfQrRGBFM352Gk=",
-        version = "v0.3.7",
-    )
-    go_repository(
-        name = "org_golang_x_time",
-        importpath = "golang.org/x/time",
-        sum = "h1:/5xXl8Y5W96D+TtHSlonuFqGHIWVuyCkGJLwGh9JJFs=",
-        version = "v0.0.0-20191024005414-555d28b269f0",
-    )
-
-    go_repository(
-        name = "org_golang_x_tools",
-        importpath = "golang.org/x/tools",
-        sum = "h1:VveCTK38A2rkS8ZqFY25HIDFscX5X9OoEhJd3quQmXU=",
-        version = "v0.1.12",
-    )
-    go_repository(
-        name = "org_golang_x_xerrors",
-        importpath = "golang.org/x/xerrors",
-        sum = "h1:H2TDz8ibqkAF6YGhCdN3jS9O0/s90v0rJh3X/OLHEUk=",
-        version = "v0.0.0-20220907171357-04be3eba64a2",
-    )
diff -ruN 1/example-workspace/example.cc 2/example-workspace/example.cc
--- 1/example-workspace/example.cc	2023-08-08 23:12:25.272239573 +0000
+++ 2/example-workspace/example.cc	1970-01-01 00:00:00.000000000 +0000
@@ -1,56 +0,0 @@
-#include <fcntl.h>
-#include <unistd.h>
-
-#include <cstdlib>
-#include <ostream>
-
-#include "google/protobuf/io/zero_copy_stream_impl.h"
-#include "google/protobuf/text_format.h"
-#include "foo/bar.pb.h"
-#include "foo/bar.pb.validate.h"
-
-int main(const int nargs, const char** const args) {
-  if (nargs <= 1) {
-    std::cout << "No inputs provided; exiting" << std::endl;
-    return EXIT_SUCCESS;
-  }
-
-  int success_count = 0;
-  for (int i = 1; i < nargs; ++i) {
-    pgv::example::foo::Bars bars;
-    const auto filename = args[i];
-    const auto fd = ::open(filename, O_RDONLY);
-    if (fd < 0) {
-      std::cerr << "Failed to open file '" << filename << "'" << std::endl;
-      continue;
-    }
-    google::protobuf::io::FileInputStream input(fd);
-    input.SetCloseOnDelete(true);
-
-    if (!google::protobuf::TextFormat::Parse(&input, &bars)) {
-      std::cerr << "Failed to parse file '" << filename << "' as a "
-                << bars.GetDescriptor()->full_name() << " textproto" << std::endl;
-      return EXIT_FAILURE;
-    }
-
-    pgv::ValidationMsg error_message;
-    if (Validate(bars, &error_message)) {
-      std::cout << "Successfully validated file '" << filename << "' as a "
-                << bars.GetDescriptor()->full_name() << " textproto"
-                << std::endl;
-      ++success_count;
-    } else {
-      std::cerr << "Failed to validate file '" << filename << "' as a "
-                << bars.GetDescriptor()->full_name()
-                << " textproto: " << error_message << std::endl;
-    }
-  }
-
-  const int failure_count = nargs - 1 - success_count;
-  if (failure_count != 0) {
-    std::cerr << "Failed to validate " << failure_count << " file"
-              << (failure_count == 1 ? "" : "s") << std::endl;
-    return EXIT_FAILURE;
-  }
-  return EXIT_SUCCESS;
-}
diff -ruN 1/example-workspace/example.py 2/example-workspace/example.py
--- 1/example-workspace/example.py	2023-08-08 23:12:25.276239509 +0000
+++ 2/example-workspace/example.py	1970-01-01 00:00:00.000000000 +0000
@@ -1,50 +0,0 @@
-import sys
-
-from google.protobuf import text_format
-from foo import bar_pb2
-from com_envoyproxy_protoc_gen_validate.python.protoc_gen_validate import validator
-from typing import List
-
-
-def main(filenames: List[str]) -> None:
-    if not filenames:
-        print("No inputs provided; exiting")
-
-    success_count = 0
-    for filename in filenames:
-        bars = bar_pb2.Bars()
-        fullname = bars.DESCRIPTOR.name
-        try:
-            with open(filename, 'r') as fh:
-                text_format.Parse(fh.read(), bars)
-        except IOError as error:
-            msg = f"Failed to open file '{filename}': {error}"
-            raise RuntimeError(msg) from error
-        except text_format.ParseError as error:
-            msg = f"Failed to parse file '{filename}' as a {fullname} textproto: {error}"
-            raise RuntimeError(msg) from error
-
-        try:
-            validator.validate(bars)
-        except validator.ValidationFailed as error:
-            print(
-                f"Failed to validate file '{filename}' as a {fullname} textproto: {error}",
-                file=sys.stderr,
-            )
-        else:
-            print(f"Successfully validated file '{filename}' as a {fullname} textproto")
-            success_count += 1
-
-    failure_count = len(filenames) - success_count
-    if failure_count:
-        s = "s" if failure_count > 1 else ""
-        msg = f"Failed to validate {failure_count} file{s}"
-        raise RuntimeError(msg)
-
-
-if __name__ == "__main__":
-    try:
-        main(sys.argv[1:])
-    except RuntimeError as error:
-        print(error, file=sys.stderr)
-        sys.exit(1)
diff -ruN 1/example-workspace/example_test.sh 2/example-workspace/example_test.sh
--- 1/example-workspace/example_test.sh	2023-08-08 23:12:25.280239446 +0000
+++ 2/example-workspace/example_test.sh	1970-01-01 00:00:00.000000000 +0000
@@ -1,10 +0,0 @@
-#!/bin/bash
-#
-
-BINARY=$1
-EXPECTED_EXIT_CODE=$2
-FILENAME=$3
-
-"${BINARY}" "${FILENAME}"
-
-test $? -eq ${EXPECTED_EXIT_CODE}
diff -ruN 1/example-workspace/foo/BUILD 2/example-workspace/foo/BUILD
--- 1/example-workspace/foo/BUILD	2023-08-08 23:12:25.284239381 +0000
+++ 2/example-workspace/foo/BUILD	1970-01-01 00:00:00.000000000 +0000
@@ -1,43 +0,0 @@
-load("@com_envoyproxy_protoc_gen_validate//bazel:pgv_proto_library.bzl", "pgv_cc_proto_library")
-load("@com_google_protobuf//:protobuf.bzl", "py_proto_library")
-
-package(
-    default_visibility = ["//visibility:public"],
-)
-
-proto_library(
-    name = "bar_proto",
-    srcs = ["bar.proto"],
-    deps = ["@com_envoyproxy_protoc_gen_validate//validate:validate_proto"],
-)
-
-pgv_cc_proto_library(
-    name = "bar_cc_proto",
-    deps = [":bar_proto"],
-)
-
-proto_library(
-    name = "baz_proto",
-    srcs = ["subdir_without_package/baz.proto"],
-    deps = ["@com_envoyproxy_protoc_gen_validate//validate:validate_proto"],
-)
-
-pgv_cc_proto_library(
-    name = "baz_cc_proto",
-    deps = [":baz_proto"],
-)
-
-cc_test(
-    name = "baz_cc_test",
-    srcs = ["baz_cc_test.cc"],
-    deps = [":baz_cc_proto"],
-)
-
-py_proto_library(
-    name = "bar_py_proto",
-    srcs = ["bar.proto"],
-    deps = [
-        "@com_envoyproxy_protoc_gen_validate//validate:validate_py",
-        "@com_google_protobuf//:protobuf_python",
-    ],
-)
diff -ruN 1/example-workspace/foo/bar.proto 2/example-workspace/foo/bar.proto
--- 1/example-workspace/foo/bar.proto	2023-08-08 23:12:25.284239381 +0000
+++ 2/example-workspace/foo/bar.proto	1970-01-01 00:00:00.000000000 +0000
@@ -1,18 +0,0 @@
-syntax = "proto3";
-
-package pgv.example.foo;
-
-import "validate/validate.proto";
-
-message BarNone {
-  int32 value = 1;
-}
-
-message BarOne {
-  int32 value = 1 [(validate.rules).int32 = { not_in: 1 }];
-}
-
-message Bars {
-  BarNone bar_none = 1;
-  BarOne bar_one = 2;
-}
diff -ruN 1/example-workspace/foo/baz_cc_test.cc 2/example-workspace/foo/baz_cc_test.cc
--- 1/example-workspace/foo/baz_cc_test.cc	2023-08-08 23:12:25.288239317 +0000
+++ 2/example-workspace/foo/baz_cc_test.cc	1970-01-01 00:00:00.000000000 +0000
@@ -1,18 +0,0 @@
-#include <fcntl.h>
-#include <unistd.h>
-
-#include <cstdlib>
-#include <ostream>
-
-#include "foo/subdir_without_package/baz.pb.h"
-#include "foo/subdir_without_package/baz.pb.validate.h"
-#include "google/protobuf/io/zero_copy_stream_impl.h"
-#include "google/protobuf/text_format.h"
-
-int main(int nargs, char** args) {
-  pgv::example::foo::Baz baz;
-  pgv::ValidationMsg msg;
-  Validate(baz, &msg);
-
-  return EXIT_SUCCESS;
-}
diff -ruN 1/example-workspace/foo/subdir_without_package/baz.proto 2/example-workspace/foo/subdir_without_package/baz.proto
--- 1/example-workspace/foo/subdir_without_package/baz.proto	2023-08-08 23:12:25.292239253 +0000
+++ 2/example-workspace/foo/subdir_without_package/baz.proto	1970-01-01 00:00:00.000000000 +0000
@@ -1,9 +0,0 @@
-syntax = "proto3";
-
-package pgv.example.foo;
-
-import "validate/validate.proto";
-
-message Baz {
-  int32 not_two = 1 [(validate.rules).int32 = { not_in: 2 }];
-}
diff -ruN 1/example-workspace/invalid.textproto 2/example-workspace/invalid.textproto
--- 1/example-workspace/invalid.textproto	2023-08-08 23:12:25.296239190 +0000
+++ 2/example-workspace/invalid.textproto	1970-01-01 00:00:00.000000000 +0000
@@ -1,10 +0,0 @@
-# proto-file: src/foo/bar.proto
-# proto-message: pgv.example.foo.Bars
-
-bar_one {
-  value: 1
-}
-
-bar_none {
-  value: 5
-}
diff -ruN 1/example-workspace/valid.textproto 2/example-workspace/valid.textproto
--- 1/example-workspace/valid.textproto	2023-08-08 23:12:25.300239125 +0000
+++ 2/example-workspace/valid.textproto	1970-01-01 00:00:00.000000000 +0000
@@ -1,9 +0,0 @@
-# proto-file: src/foo/bar.proto
-# proto-message: pgv.example.foo.Bars
-
-bar_none {
-  value: 5
-}
-bar_one {
-  value: 3
-}
diff -ruN 1/python/BUILD 2/python/BUILD
--- 1/python/BUILD	2023-08-08 23:12:25.324238741 +0000
+++ 2/python/BUILD	1970-01-01 00:00:00.000000000 +0000
@@ -1,14 +0,0 @@
-load("@rules_python//python:defs.bzl", "py_library")
-load("@pgv_pip_deps//:requirements.bzl", "all_requirements")
-
-exports_files([
-    "requirements.in",
-    "setup.cfg",
-])
-
-py_library(
-    name = "validator_py",
-    srcs = glob(["**/*.py"]),
-    visibility = ["//visibility:public"],
-    deps = all_requirements,
-)
diff -ruN 1/python/README.md 2/python/README.md
--- 1/python/README.md	2023-08-08 23:12:25.328238678 +0000
+++ 2/python/README.md	1970-01-01 00:00:00.000000000 +0000
@@ -1,30 +0,0 @@
-# Protoc-gen-validate (PGV)
-While protocol buffers effectively guarantee the types of structured data, 
-they cannot enforce semantic rules for values. This package is a python implementation
-of [protoc-gen-validate][pgv-home], which allows for runtime validation of various 
-semantic assertions expressed as annotations on the protobuf schema. The syntax for all available annotations is
-in `validate.proto`. Implemented Python annotations are listed in the [rules comparison][rules-comparison].
-
-### Example
-```python3
-from entities_pb2 import Person
-from protoc_gen_validate.validator import validate, ValidationFailed, validate_all
-
-p = Person(name="Foo")
-try:
-    validate(p)
-except ValidationFailed as err:
-    print(err)  # p.id is not greater than 999
-    
-try:
-    validate_all(p)
-except ValidationFailed as err:
-    print(err)  
-    # p.id is not greater than 999
-    # p.email is not a valid email
-    # p.name pattern does not match ^[^[0-9]A-Za-z]+( [^[0-9]A-Za-z]+)*$
-    # home is required.
-```
-
-[pgv-home]: https://github.com/envoyproxy/protoc-gen-validate
-[rules-comparison]: https://github.com/envoyproxy/protoc-gen-validate/blob/main/rule_comparison.md
\ No newline at end of file
diff -ruN 1/python/protoc_gen_validate/validator.py 2/python/protoc_gen_validate/validator.py
--- 1/python/protoc_gen_validate/validator.py	2023-08-08 23:12:25.332238615 +0000
+++ 2/python/protoc_gen_validate/validator.py	1970-01-01 00:00:00.000000000 +0000
@@ -1,1255 +0,0 @@
-import ast
-import re
-import struct
-import sys
-import time
-import uuid
-from functools import lru_cache
-from ipaddress import IPv4Address, IPv6Address, ip_address
-from urllib import parse as urlparse
-
-from google.protobuf.message import Message
-from jinja2 import Template
-from validate_email import validate_email
-
-if sys.version_info > (3, 9):
-    unparse = ast.unparse
-else:
-    import astunparse
-    unparse = astunparse.unparse
-
-printer = ""
-
-# Well known regex mapping.
-regex_map = {
-    "UNKNOWN": "",
-    "HTTP_HEADER_NAME": r'^:?[0-9a-zA-Z!#$%&\'*+-.^_|~\x60]+$',
-    "HTTP_HEADER_VALUE": r'^[^\u0000-\u0008\u000A-\u001F\u007F]*$',
-    "HEADER_STRING": r'^[^\u0000\u000A\u000D]*$'
-}
-
-
-class ValidationFailed(Exception):
-    pass
-
-
-class ValidatingMessage(object):
-    """Wrap a proto message to cache validate functions with the message class name.
-
-    A validate function is defined per message class in protoc-gen-validate,
-     so we can reuse an already generated function for the same message class.
-    """
-
-    def __init__(self, proto_message):
-        self.DESCRIPTOR = proto_message.DESCRIPTOR
-
-    def __hash__(self):
-        return hash(self.DESCRIPTOR.full_name)
-
-    def __eq__(self, other):
-        if isinstance(other, ValidatingMessage):
-            return self.DESCRIPTOR.full_name == other.DESCRIPTOR.full_name
-        else:
-            return False
-
-
-def validate(proto_message: Message):
-    return _validate_inner(ValidatingMessage(proto_message))(proto_message)
-
-
-# Cache generated functions with the message descriptor's full_name as the cache key
-@lru_cache()
-def _validate_inner(proto_message: Message):
-    func = file_template(proto_message)
-    global printer
-    printer += func + "\n"
-    exec(func)
-    try:
-        return generate_validate
-    except NameError:
-        return locals()['generate_validate']
-
-
-class ChangeFuncName(ast.NodeTransformer):
-    def visit_FunctionDef(self, node: ast.FunctionDef):
-        node.name = node.name + "_all"  # add a suffix to the function name
-        return node
-
-
-class InitErr(ast.NodeTransformer):
-    def visit_FunctionDef(self, node: ast.FunctionDef):
-        node.body.insert(0, ast.parse("err = []").body[0])
-        return node
-
-
-class ReturnErr(ast.NodeTransformer):
-    def visit_Return(self, node: ast.Return):
-        # Change the return value of the function from None to err
-        if hasattr(node.value, "value") and getattr(node.value, "value") is None:
-            return ast.parse("return err").body[0]
-        return node
-
-
-class ChangeInnerCall(ast.NodeTransformer):
-    def visit_Call(self, node: ast.Call):
-        """Changed the validation function of nested messages from `validate` to
-        `_validate_all`"""
-        if isinstance(node.func, ast.Name) and node.func.id == "validate":
-            node.func.id = "_validate_all"
-        return node
-
-
-class ChangeRaise(ast.NodeTransformer):
-    def visit_Raise(self, node: ast.Raise):
-        """
-        before:
-            raise ValidationFailed(reason)
-        after:
-            err.append(reason)
-        """
-        # According to the content in the template, the exception object of all `raise`
-        # statements is `ValidationFailed`.
-        if not isinstance(node.exc, ast.Call):
-            return node
-        return ast.Expr(
-            value=ast.Call(
-                args=node.exc.args,
-                keywords=node.exc.keywords,
-                func=ast.Attribute(
-                    attr="append", ctx=ast.Load(), value=ast.Name(id="err", ctx=ast.Load())
-                ),
-            )
-        )
-
-
-class ChangeEmbedded(ast.NodeTransformer):
-    """For embedded messages, there is a special structure in the template as follows:
-
-    if _has_field(p, \"{{ name.split('.')[-1] }}\"):
-        embedded = validate(p.{{ name }})
-        if embedded is not None:
-            return embedded
-
-    We need to convert this code into the following form:
-
-    if _has_field(p, \"{{ name.split('.')[-1] }}\"):
-        err += _validate_all(p.{{ name }}
-
-    """
-    @staticmethod
-    def _is_embedded_node(node: ast.Assign):
-        """Check if substructures match
-
-        pattern:
-        embedded = validate(p.{{ name }})
-        """
-        if not isinstance(node, ast.Assign):
-            return False
-        if len(node.targets) != 1:
-            return False
-        target = node.targets[0]
-        value = node.value
-        if not (isinstance(target, ast.Name) and isinstance(value, ast.Call)):
-            return False
-        if not target.id == "embedded":
-            return False
-        return True
-
-    def visit_If(self, node: ast.If):
-        self.generic_visit(node)
-        for child in ast.iter_child_nodes(node):
-            if self._is_embedded_node(child):
-                new_node = ast.AugAssign(
-                    target=ast.Name(id="err", ctx=ast.Store()), op=ast.Add(), value=child.value
-                )  # err += _validate_all(p.{{ name }}
-                node.body = [new_node]
-                return node
-        return node
-
-
-class ChangeExpr(ast.NodeTransformer):
-
-    """If there is a pure `_validate_all` function call in the template function,
-    its return value needs to be recorded in err
-
-    before:
-    _validate_all(item)
-
-    after:
-    err += _validate_all(item}
-
-    """
-
-    def visit_Expr(self, node: ast.Expr):
-        if not isinstance(node.value, ast.Call):
-            return node
-        call_node = node.value
-        if not isinstance(call_node.func, ast.Name):
-            return node
-        if not call_node.func.id == "_validate_all":
-            return node
-        return ast.AugAssign(
-            target=ast.Name(id="err", ctx=ast.Store()), op=ast.Add(), value=call_node
-        )  # err += _validate_all(item}
-
-
-# Cache generated functions with the message descriptor's full_name as the cache key
-@lru_cache()
-def _validate_all_inner(proto_message: Message):
-    func = file_template(ValidatingMessage(proto_message))
-    comment = func.split("\n")[1]
-    func_ast = ast.parse(rf"{func}")
-    for transformer in [
-        ChangeFuncName,
-        InitErr,
-        ReturnErr,
-        ChangeInnerCall,
-        ChangeRaise,
-        ChangeEmbedded,
-        ChangeExpr,
-    ]:  # order is important!
-        func_ast = ast.fix_missing_locations(transformer().visit(func_ast))
-    func_ast = ast.fix_missing_locations(func_ast)
-    func = unparse(func_ast)
-    func = comment + " All" + "\n" + func
-    global printer
-    printer += func + "\n"
-    exec(func)
-    try:
-        return generate_validate_all
-    except NameError:
-        return locals()['generate_validate_all']
-
-
-def _validate_all(proto_message: Message) -> str:
-    return _validate_all_inner(ValidatingMessage(proto_message))(proto_message)
-
-
-# raise ValidationFailed if err
-def validate_all(proto_message: Message):
-    err = _validate_all(proto_message)
-    if err:
-        raise ValidationFailed('\n'.join(err))
-
-
-def print_validate():
-    return "".join([s for s in printer.splitlines(True) if s.strip()])
-
-
-def has_validate(field):
-    if field.GetOptions() is None:
-        return False
-    for option_descriptor, option_value in field.GetOptions().ListFields():
-        if option_descriptor.full_name == "validate.rules":
-            return True
-    return False
-
-
-def byte_len(s):
-    try:
-        return len(s.encode('utf-8'))
-    except:  # noqa
-        return len(s)
-
-
-def _validateHostName(host):
-    if not host:
-        return False
-    if len(host) > 253:
-        return False
-
-    if host[-1] == '.':
-        host = host[:-1]
-
-    for part in host.split("."):
-        if len(part) == 0 or len(part) > 63:
-            return False
-
-        # Host names cannot begin or end with hyphens
-        if part[0] == "-" or part[-1] == '-':
-            return False
-        for r in part:
-            if (r < 'A' or r > 'Z') and (r < 'a' or r > 'z') and (r < '0' or r > '9') and r != '-':
-                return False
-    return True
-
-
-def _validateEmail(addr):
-    if '<' in addr and '>' in addr:
-        addr = addr.split("<")[1].split(">")[0]
-
-    if not validate_email(addr):
-        return False
-
-    if len(addr) > 254:
-        return False
-
-    parts = addr.split("@")
-    if len(parts[0]) > 64:
-        return False
-    return _validateHostName(parts[1])
-
-
-def _has_field(message_pb, property_name):
-    # NOTE: As of proto3, HasField() only works for message fields, not for
-    #       singular (non-message) fields. First try to use HasField and
-    #       if it fails (with a ValueError) we manually consult the fields.
-    try:
-        return message_pb.HasField(property_name)
-    except:  # noqa
-        all_fields = set([field.name for field in message_pb.DESCRIPTOR.fields])
-        return property_name in all_fields
-
-
-def const_template(option_value, name):
-    const_tmpl = """{%- if str(o.string) and o.string.HasField('const') -%}
-    if {{ name }} != \"{{ o.string['const'] }}\":
-        raise ValidationFailed(\"{{ name }} not equal to {{ o.string['const'] }}\")
-    {%- elif str(o.bool) and o.bool['const'] != "" -%}
-    if {{ name }} != {{ o.bool['const'] }}:
-        raise ValidationFailed(\"{{ name }} not equal to {{ o.bool['const'] }}\")
-    {%- elif str(o.bytes) and o.bytes.HasField('const') -%}
-        {% if sys.version_info[0] >= 3 %}
-    if {{ name }} != {{ o.bytes['const'] }}:
-        raise ValidationFailed(\"{{ name }} not equal to {{ o.bytes['const'] }}\")
-        {% else %}
-    if {{ name }} != b\"{{ o.bytes['const'].encode('string_escape') }}\":
-        raise ValidationFailed(\"{{ name }} not equal to {{ o.bytes['const'].encode('string_escape') }}\")
-        {% endif %}
-    {%- endif -%}
-    """
-    return Template(const_tmpl).render(sys=sys, o=option_value, name=name, str=str)
-
-
-def in_template(value, name):
-    in_tmpl = """
-    {%- if value['in'] %}
-    if {{ name }} not in {{ value['in'] }}:
-        raise ValidationFailed(\"{{ name }} not in {{ value['in'] }}\")
-    {%- endif -%}
-    {%- if value['not_in'] %}
-    if {{ name }} in {{ value['not_in'] }}:
-        raise ValidationFailed(\"{{ name }} in {{ value['not_in'] }}\")
-    {%- endif -%}
-    """
-    return Template(in_tmpl).render(value=value, name=name)
-
-
-def string_template(option_value, name):
-    if option_value.string.well_known_regex:
-        known_regex_type = option_value.string.DESCRIPTOR.fields_by_name['well_known_regex'].enum_type
-        regex_value = option_value.string.well_known_regex
-        regex_name = known_regex_type.values_by_number[regex_value].name
-        if regex_name in ["HTTP_HEADER_NAME", "HTTP_HEADER_VALUE"] and not option_value.string.strict:
-            option_value.string.pattern = regex_map["HEADER_STRING"]
-        else:
-            option_value.string.pattern = regex_map[regex_name]
-    str_templ = """
-    {%- set s = o.string -%}
-    {% set i = 0 %}
-    {%- if s['ignore_empty'] %}
-    if {{ name }}:
-    {% set i = 4 %}
-    {%- endif -%}
-    {% filter indent(i,True) %}
-    {{ const_template(o, name) -}}
-    {{ in_template(o.string, name) -}}
-    {%- if s['len'] %}
-    if len({{ name }}) != {{ s['len'] }}:
-        raise ValidationFailed(\"{{ name }} length does not equal {{ s['len'] }}\")
-    {%- endif -%}
-    {%- if s['min_len'] %}
-    if len({{ name }}) < {{ s['min_len'] }}:
-        raise ValidationFailed(\"{{ name }} length is less than {{ s['min_len'] }}\")
-    {%- endif -%}
-    {%- if s['max_len'] %}
-    if len({{ name }}) > {{ s['max_len'] }}:
-        raise ValidationFailed(\"{{ name }} length is more than {{ s['max_len'] }}\")
-    {%- endif -%}
-    {%- if s['len_bytes'] %}
-    if byte_len({{ name }}) != {{ s['len_bytes'] }}:
-        raise ValidationFailed(\"{{ name }} length does not equal {{ s['len_bytes'] }}\")
-    {%- endif -%}
-    {%- if s['min_bytes'] %}
-    if byte_len({{ name }}) < {{ s['min_bytes'] }}:
-        raise ValidationFailed(\"{{ name }} length is less than {{ s['min_bytes'] }}\")
-    {%- endif -%}
-    {%- if s['max_bytes'] %}
-    if byte_len({{ name }}) > {{ s['max_bytes'] }}:
-        raise ValidationFailed(\"{{ name }} length is greater than {{ s['max_bytes'] }}\")
-    {%- endif -%}
-    {%- if s['pattern'] %}
-    if re.search(r\'{{ s['pattern'] }}\', {{ name }}) is None:
-        raise ValidationFailed(\"{{ name }} pattern does not match {{ s['pattern'] }}\")
-    {%- endif -%}
-    {%- if s['prefix'] %}
-    if not {{ name }}.startswith(\"{{ s['prefix'] }}\"):
-        raise ValidationFailed(\"{{ name }} does not start with prefix {{ s['prefix'] }}\")
-    {%- endif -%}
-    {%- if s['suffix'] %}
-    if not {{ name }}.endswith(\"{{ s['suffix'] }}\"):
-        raise ValidationFailed(\"{{ name }} does not end with suffix {{ s['suffix'] }}\")
-    {%- endif -%}
-    {%- if s['contains'] %}
-    if not \"{{ s['contains'] }}\" in {{ name }}:
-        raise ValidationFailed(\"{{ name }} does not contain {{ s['contains'] }}\")
-    {%- endif -%}
-    {%- if s['not_contains'] %}
-    if \"{{ s['not_contains'] }}\" in {{ name }}:
-        raise ValidationFailed(\"{{ name }} contains {{ s['not_contains'] }}\")
-    {%- endif -%}
-    {%- if s['email'] %}
-    if not _validateEmail({{ name }}):
-        raise ValidationFailed(\"{{ name }} is not a valid email\")
-    {%- endif -%}
-    {%- if s['hostname'] %}
-    if not _validateHostName({{ name }}):
-        raise ValidationFailed(\"{{ name }} is not a valid email\")
-    {%- endif -%}
-    {%- if s['address'] %}
-    try:
-        ip_address({{ name }})
-    except ValueError:
-        if not _validateHostName({{ name }}):
-            raise ValidationFailed(\"{{ name }} is not a valid address\")
-    {%- endif -%}
-    {%- if s['ip'] %}
-    try:
-        ip_address({{ name }})
-    except ValueError:
-        raise ValidationFailed(\"{{ name }} is not a valid ip\")
-    {%- endif -%}
-    {%- if s['ipv4'] %}
-    try:
-        IPv4Address({{ name }})
-    except ValueError:
-        raise ValidationFailed(\"{{ name }} is not a valid ipv4\")
-    {%- endif -%}
-    {%- if s['ipv6'] %}
-    try:
-        IPv6Address({{ name }})
-    except ValueError:
-        raise ValidationFailed(\"{{ name }} is not a valid ipv6\")
-    {%- endif %}
-    {%- if s['uri'] %}
-    url = urlparse.urlparse({{ name }})
-    if not all([url.scheme, url.netloc, url.path]):
-        raise ValidationFailed(\"{{ name }} is not a valid uri\")
-    {%- endif %}
-    {%- if s['uri_ref'] %}
-    url = urlparse.urlparse({{ name }})
-    if not all([url.scheme, url.path]) and url.fragment:
-        raise ValidationFailed(\"{{ name }} is not a valid uri ref\")
-    {%- endif -%}
-    {%- if s['uuid'] %}
-    try:
-        uuid.UUID({{ name }})
-    except ValueError:
-        raise ValidationFailed(\"{{ name }} is not a valid UUID\")
-    {%- endif -%}
-    {% endfilter %}
-    """
-    return Template(str_templ).render(o=option_value, name=name, const_template=const_template, in_template=in_template)
-
-
-def required_template(value, name):
-    req_tmpl = """{%- if value['required'] %}
-    if not _has_field(p, \"{{ name.split('.')[-1] }}\"):
-        raise ValidationFailed(\"{{ name }} is required.\")
-    {%- endif -%}
-    """
-    return Template(req_tmpl).render(value=value, name=name)
-
-
-def message_template(option_value, name, repeated=False):
-    message_tmpl = """{%- if m.message %}
-    {{- required_template(m.message, name) }}
-    {%- endif -%}
-    {%- if m.message and m.message['skip'] %}
-    # Skipping validation for {{ name }}
-    {%- else %}
-    {% if repeated %}
-    if {{ name }}:
-    {% else %}
-    if _has_field(p, \"{{ name.split('.')[-1] }}\"):
-    {% endif %}
-        embedded = validate(p.{{ name }})
-        if embedded is not None:
-            return embedded
-    {%- endif -%}
-    """
-    return Template(message_tmpl).render(
-        m=option_value, name=name, required_template=required_template, repeated=repeated)
-
-
-def bool_template(option_value, name):
-    bool_tmpl = """
-    {{ const_template(o, name) -}}
-    """
-    return Template(bool_tmpl).render(o=option_value, name=name, const_template=const_template)
-
-
-def num_template(option_value, name, num):
-    num_tmpl = """
-    {% set i = 0 %}
-    {%- if num.HasField('ignore_empty') %}
-    if {{ name }}:
-    {% set i = 4 %}
-    {%- endif -%}
-    {% filter indent(i,True) %}
-    {%- if num.HasField('const') and str(o.float) == "" -%}
-    if {{ name }} != {{ num['const'] }}:
-        raise ValidationFailed(\"{{ name }} not equal to {{ num['const'] }}\")
-    {%- endif -%}
-    {%- if num.HasField('const') and str(o.float) != "" %}
-    if {{ name }} != struct.unpack(\"f\", struct.pack(\"f\", ({{ num['const'] }})))[0]:
-        raise ValidationFailed(\"{{ name }} not equal to {{ num['const'] }}\")
-    {%- endif -%}
-    {{ in_template(num, name) }}
-    {%- if num.HasField('lt') %}
-        {%- if num.HasField('gt') %}
-            {%- if num['lt'] > num['gt'] %}
-    if {{ name }} <= {{ num['gt'] }} or {{ name }} >= {{ num ['lt'] }}:
-        raise ValidationFailed(\"{{ name }} is not in range {{ num['lt'], num['gt'] }}\")
-            {%- else %}
-    if {{ name }} >= {{ num['lt'] }} and {{ name }} <= {{ num['gt'] }}:
-        raise ValidationFailed(\"{{ name }} is not in range {{ num['gt'], num['lt'] }}\")
-            {%- endif -%}
-        {%- elif num.HasField('gte') %}
-            {%- if num['lt'] > num['gte'] %}
-    if {{ name }} < {{ num['gte'] }} or {{ name }} >= {{ num ['lt'] }}:
-        raise ValidationFailed(\"{{ name }} is not in range {{ num['lt'], num['gte'] }}\")
-            {%- else %}
-    if {{ name }} >= {{ num['lt'] }} and {{ name }} < {{ num['gte'] }}:
-        raise ValidationFailed(\"{{ name }} is not in range {{ num['gte'], num['lt'] }}\")
-            {%- endif -%}
-        {%- else %}
-    if {{ name }} >= {{ num['lt'] }}:
-        raise ValidationFailed(\"{{ name }} is not lesser than {{ num['lt'] }}\")
-        {%- endif -%}
-    {%- elif num.HasField('lte') %}
-        {%- if num.HasField('gt') %}
-            {%- if num['lte'] > num['gt'] %}
-    if {{ name }} <= {{ num['gt'] }} or {{ name }} > {{ num ['lte'] }}:
-        raise ValidationFailed(\"{{ name }} is not in range {{ num['lte'], num['gt'] }}\")
-            {%- else %}
-    if {{ name }} > {{ num['lte'] }} and {{ name }} <= {{ num['gt'] }}:
-        raise ValidationFailed(\"{{ name }} is not in range {{ num['gt'], num['lte'] }}\")
-            {%- endif -%}
-        {%- elif num.HasField('gte') %}
-            {%- if num['lte'] > num['gte'] %}
-    if {{ name }} < {{ num['gte'] }} or {{ name }} > {{ num ['lte'] }}:
-        raise ValidationFailed(\"{{ name }} is not in range {{ num['lte'], num['gte'] }}\")
-            {%- else %}
-    if {{ name }} > {{ num['lte'] }} and {{ name }} < {{ num['gte'] }}:
-        raise ValidationFailed(\"{{ name }} is not in range {{ num['gte'], num['lte'] }}\")
-            {%- endif -%}
-        {%- else %}
-    if {{ name }} > {{ num['lte'] }}:
-        raise ValidationFailed(\"{{ name }} is not lesser than or equal to {{ num['lte'] }}\")
-        {%- endif -%}
-    {%- elif num.HasField('gt') %}
-    if {{ name }} <= {{ num['gt'] }}:
-        raise ValidationFailed(\"{{ name }} is not greater than {{ num['gt'] }}\")
-    {%- elif num.HasField('gte') %}
-    if {{ name }} < {{ num['gte'] }}:
-        raise ValidationFailed(\"{{ name }} is not greater than or equal to {{ num['gte'] }}\")
-    {%- endif -%}
-    {% endfilter %}
-    """
-    return Template(num_tmpl).render(o=option_value, name=name, num=num, in_template=in_template, str=str)
-
-
-def dur_arr(dur):
-    value = 0
-    arr = []
-    for val in dur:
-        value += val.seconds
-        value += (10**-9 * val.nanos)
-        arr.append(value)
-        value = 0
-    return arr
-
-
-def dur_lit(dur):
-    value = dur.seconds + (10**-9 * dur.nanos)
-    return value
-
-
-def duration_template(option_value, name, repeated=False):
-    dur_tmpl = """
-    {{- required_template(o.duration, name) }}
-    {% if repeated %}
-    if {{ name }}:
-    {% else %}
-    if _has_field(p, \"{{ name.split('.')[-1] }}\"):
-    {% endif %}
-        dur = {{ name }}.seconds + round((10**-9 * {{ name }}.nanos), 9)
-        {%- set dur = o.duration -%}
-        {%- if dur.HasField('lt') %}
-        lt = {{ dur_lit(dur['lt']) }}
-        {% endif %}
-        {%- if dur.HasField('lte') %}
-        lte = {{ dur_lit(dur['lte']) }}
-        {% endif %}
-        {%- if dur.HasField('gt') %}
-        gt = {{ dur_lit(dur['gt']) }}
-        {% endif %}
-        {%- if dur.HasField('gte') %}
-        gte = {{ dur_lit(dur['gte']) }}
-        {% endif %}
-        {%- if dur.HasField('const') %}
-        if dur != {{ dur_lit(dur['const']) }}:
-            raise ValidationFailed(\"{{ name }} is not equal to {{ dur_lit(dur['const']) }}\")
-        {%- endif -%}
-        {%- if dur['in'] %}
-        if dur not in {{ dur_arr(dur['in']) }}:
-            raise ValidationFailed(\"{{ name }} is not in {{ dur_arr(dur['in']) }}\")
-        {%- endif -%}
-        {%- if dur['not_in'] %}
-        if dur in {{ dur_arr(dur['not_in']) }}:
-            raise ValidationFailed(\"{{ name }} is not in {{ dur_arr(dur['not_in']) }}\")
-        {%- endif -%}
-        {%- if dur.HasField('lt') %}
-            {%- if dur.HasField('gt') %}
-                {%- if dur_lit(dur['lt']) > dur_lit(dur['gt']) %}
-        if dur <= gt or dur >= lt:
-            raise ValidationFailed(\"{{ name }} is not in range {{ dur_lit(dur['lt']), dur_lit(dur['gt']) }}\")
-                {%- else -%}
-        if dur >= lt and dur <= gt:
-            raise ValidationFailed(\"{{ name }} is not in range {{ dur_lit(dur['gt']), dur_lit(dur['lt']) }}\")
-                {%- endif -%}
-            {%- elif dur.HasField('gte') %}
-                {%- if dur_lit(dur['lt']) > dur_lit(dur['gte']) %}
-        if dur < gte or dur >= lt:
-            raise ValidationFailed(\"{{ name }} is not in range {{ dur_lit(dur['lt']), dur_lit(dur['gte']) }}\")
-                {%- else -%}
-        if dur >= lt and dur < gte:
-            raise ValidationFailed(\"{{ name }} is not in range {{ dur_lit(dur['gte']), dur_lit(dur['lt']) }}\")
-                {%- endif -%}
-            {%- else -%}
-        if dur >= lt:
-            raise ValidationFailed(\"{{ name }} is not lesser than {{ dur_lit(dur['lt']) }}\")
-            {%- endif -%}
-        {%- elif dur.HasField('lte') %}
-            {%- if dur.HasField('gt') %}
-                {%- if dur_lit(dur['lte']) > dur_lit(dur['gt']) %}
-        if dur <= gt or dur > lte:
-            raise ValidationFailed(\"{{ name }} is not in range {{ dur_lit(dur['lte']), dur_lit(dur['gt']) }}\")
-                {%- else -%}
-        if dur > lte and dur <= gt:
-            raise ValidationFailed(\"{{ name }} is not in range {{ dur_lit(dur['gt']), dur_lit(dur['lte']) }}\")
-                {%- endif -%}
-            {%- elif dur.HasField('gte') %}
-                {%- if dur_lit(dur['lte']) > dur_lit(dur['gte']) %}
-        if dur < gte or dur > lte:
-            raise ValidationFailed(\"{{ name }} is not in range {{ dur_lit(dur['lte']), dur_lit(dur['gte']) }}\")
-                {%- else -%}
-        if dur > lte and dur < gte:
-            raise ValidationFailed(\"{{ name }} is not in range {{ dur_lit(dur['gte']), dur_lit(dur['lte']) }}\")
-                {%- endif -%}
-            {%- else -%}
-        if dur > lte:
-            raise ValidationFailed(\"{{ name }} is not lesser than or equal to {{ dur_lit(dur['lte']) }}\")
-            {%- endif -%}
-        {%- elif dur.HasField('gt') %}
-        if dur <= gt:
-            raise ValidationFailed(\"{{ name }} is not greater than {{ dur_lit(dur['gt']) }}\")
-        {%- elif dur.HasField('gte') %}
-        if dur < gte:
-            raise ValidationFailed(\"{{ name }} is not greater than or equal to {{ dur_lit(dur['gte']) }}\")
-        {%- endif -%}
-    """
-    return Template(dur_tmpl).render(o=option_value, name=name, required_template=required_template,
-                                     dur_lit=dur_lit, dur_arr=dur_arr, repeated=repeated)
-
-
-def timestamp_template(option_value, name, repeated=False):
-    timestamp_tmpl = """
-    {{- required_template(o.timestamp, name) }}
-    {% if repeated %}
-    if {{ name }}:
-    {% else %}
-    if _has_field(p, \"{{ name.split('.')[-1] }}\"):
-    {% endif %}
-        ts = {{ name }}.seconds + round((10**-9 * {{ name }}.nanos), 9)
-        {%- set ts = o.timestamp -%}
-        {%- if ts.HasField('lt') %}
-        lt = {{ dur_lit(ts['lt']) }}
-        {% endif -%}
-        {%- if ts.HasField('lte') %}
-        lte = {{ dur_lit(ts['lte']) }}
-        {% endif -%}
-        {%- if ts.HasField('gt') %}
-        gt = {{ dur_lit(ts['gt']) }}
-        {% endif -%}
-        {%- if ts.HasField('gte') %}
-        gte = {{ dur_lit(ts['gte']) }}
-        {% endif -%}
-        {%- if ts.HasField('const') %}
-        if ts != {{ dur_lit(ts['const']) }}:
-            raise ValidationFailed(\"{{ name }} is not equal to {{ dur_lit(ts['const']) }}\")
-        {% endif %}
-        {%- if ts['in'] %}
-        if ts not in {{ dur_arr(ts['in']) }}:
-            raise ValidationFailed(\"{{ name }} is not in {{ dur_arr(ts['in']) }}\")
-        {%- endif %}
-        {%- if ts['not_in'] %}
-        if ts in {{ dur_arr(ts['not_in']) }}:
-            raise ValidationFailed(\"{{ name }} is not in {{ dur_arr(ts['not_in']) }}\")
-        {%- endif %}
-        {%- if ts.HasField('lt') %}
-            {%- if ts.HasField('gt') %}
-                {%- if dur_lit(ts['lt']) > dur_lit(ts['gt']) %}
-        if ts <= gt or ts >= lt:
-            raise ValidationFailed(\"{{ name }} is not in range {{ dur_lit(ts['lt']), dur_lit(ts['gt']) }}\")
-                {%- else -%}
-        if ts >= lt and ts <= gt:
-            raise ValidationFailed(\"{{ name }} is not in range {{ dur_lit(ts['gt']), dur_lit(ts['lt']) }}\")
-                {%- endif -%}
-            {%- elif ts.HasField('gte') %}
-                {%- if dur_lit(ts['lt']) > dur_lit(ts['gte']) %}
-        if ts < gte or ts >= lt:
-            raise ValidationFailed(\"{{ name }} is not in range {{ dur_lit(ts['lt']), dur_lit(ts['gte']) }}\")
-                {%- else -%}
-        if ts >= lt and ts < gte:
-            raise ValidationFailed(\"{{ name }} is not in range {{ dur_lit(ts['gte']), dur_lit(ts['lt']) }}\")
-                {%- endif -%}
-            {%- else -%}
-        if ts >= lt:
-            raise ValidationFailed(\"{{ name }} is not lesser than {{ dur_lit(ts['lt']) }}\")
-            {%- endif -%}
-        {%- elif ts.HasField('lte') %}
-            {%- if ts.HasField('gt') %}
-                {%- if dur_lit(ts['lte']) > dur_lit(ts['gt']) %}
-        if ts <= gt or ts > lte:
-            raise ValidationFailed(\"{{ name }} is not in range {{ dur_lit(ts['lte']), dur_lit(ts['gt']) }}\")
-                {%- else -%}
-        if ts > lte and ts <= gt:
-            raise ValidationFailed(\"{{ name }} is not in range {{ dur_lit(ts['gt']), dur_lit(ts['lte']) }}\")
-                {%- endif -%}
-            {%- elif ts.HasField('gte') %}
-                {%- if dur_lit(ts['lte']) > dur_lit(ts['gte']) %}
-        if ts < gte or ts > lte:
-            raise ValidationFailed(\"{{ name }} is not in range {{ dur_lit(ts['lte']), dur_lit(ts['gte']) }}\")
-                {%- else -%}
-        if ts > lte and ts < gte:
-            raise ValidationFailed(\"{{ name }} is not in range {{ dur_lit(ts['gte']), dur_lit(ts['lte']) }}\")
-                {%- endif -%}
-            {%- else -%}
-        if ts > lte:
-            raise ValidationFailed(\"{{ name }} is not lesser than or equal to {{ dur_lit(ts['lte']) }}\")
-            {%- endif -%}
-        {%- elif ts.HasField('gt') %}
-        if ts <= gt:
-            raise ValidationFailed(\"{{ name }} is not greater than {{ dur_lit(ts['gt']) }}\")
-        {%- elif ts.HasField('gte') %}
-        if ts < gte:
-            raise ValidationFailed(\"{{ name }} is not greater than or equal to {{ dur_lit(ts['gte']) }}\")
-        {%- elif ts.HasField('lt_now') %}
-        now = time.time()
-            {%- if ts.HasField('within') %}
-        within = {{ dur_lit(ts['within']) }}
-        if ts >= now or ts <= now - within:
-            raise ValidationFailed(\"{{ name }} is not within range {{ dur_lit(ts['within']) }}\")
-            {%- else %}
-        if ts >= now:
-            raise ValidationFailed(\"{{ name }} is not lesser than now\")
-            {%- endif -%}
-        {%- elif ts.HasField('gt_now') %}
-        now = time.time()
-            {%- if ts.HasField('within') %}
-        within = {{ dur_lit(ts['within']) }}
-        if ts <= now or ts >= now + within:
-            raise ValidationFailed(\"{{ name }} is not within range {{ dur_lit(ts['within']) }}\")
-            {%- else %}
-        if ts <= now:
-            raise ValidationFailed(\"{{ name }} is not greater than now\")
-            {%- endif -%}
-        {%- elif ts.HasField('within') %}
-        now = time.time()
-        within = {{ dur_lit(ts['within']) }}
-        if ts >= now + within or ts <= now - within:
-             raise ValidationFailed(\"{{ name }} is not within range {{ dur_lit(ts['within']) }}\")
-        {%- endif -%}
-    """
-    return Template(timestamp_tmpl).render(o=option_value, name=name, required_template=required_template,
-                                           dur_lit=dur_lit, dur_arr=dur_arr, repeated=repeated)
-
-
-def wrapper_template(option_value, name, repeated=False):
-    wrapper_tmpl = """
-    {% if repeated %}
-    if {{ name }}:
-    {% else %}
-    if p.HasField(\"{{ name[2:] }}\"):
-    {% endif %}
-        {%- if str(option_value.float) %}
-        {{- num_template(option_value, name + ".value", option_value.float)|indent(4,True) -}}
-        {% endif -%}
-        {%- if str(option_value.double) %}
-        {{- num_template(option_value, name + ".value", option_value.double)|indent(4,True) -}}
-        {% endif -%}
-        {%- if str(option_value.int32) %}
-        {{- num_template(option_value, name + ".value", option_value.int32)|indent(4,True) -}}
-        {% endif -%}
-        {%- if str(option_value.int64) %}
-        {{- num_template(option_value, name + ".value", option_value.int64)|indent(4,True) -}}
-        {% endif -%}
-        {%- if str(option_value.uint32) %}
-        {{- num_template(option_value, name + ".value", option_value.uint32)|indent(4,True) -}}
-        {% endif -%}
-        {%- if str(option_value.uint64) %}
-        {{- num_template(option_value, name + ".value", option_value.uint64)|indent(4,True) -}}
-        {% endif -%}
-        {%- if str(option_value.bool) %}
-        {{- bool_template(option_value, name + ".value")|indent(4,True) -}}
-        {% endif -%}
-        {%- if str(option_value.string) %}
-        {{- string_template(option_value, name + ".value")|indent(4,True) -}}
-        {% endif -%}
-        {%- if str(option_value.bytes) %}
-        {{- bytes_template(option_value, name + ".value")|indent(4,True) -}}
-        {% endif -%}
-    {%- if str(option_value.message) and option_value.message['required'] %}
-    else:
-        raise ValidationFailed(\"{{ name }} is required.\")
-    {%- endif %}
-    """
-    return Template(wrapper_tmpl).render(option_value=option_value, name=name, str=str, num_template=num_template,
-                                         bool_template=bool_template, string_template=string_template,
-                                         bytes_template=bytes_template, repeated=repeated)
-
-
-def enum_values(field):
-    return [x.number for x in field.enum_type.values]
-
-
-def enum_name(field, number):
-    for x in field.enum_type.values:
-        if x.number == number:
-            return x.name
-    return ""
-
-
-def enum_names(field, numbers):
-    m = {x.number: x.name for x in field.enum_type.values}
-    return "[" + "".join([m[n] for n in numbers]) + "]"
-
-
-def enum_const_template(value, name, field):
-    const_tmpl = """{%- if str(value) and value['const'] -%}
-    if {{ name }} != {{ value['const'] }}:
-        raise ValidationFailed(\"{{ name }} not equal to {{ enum_name(field, value['const']) }}\")
-    {%- endif -%}
-    """
-    return Template(const_tmpl).render(value=value, name=name, field=field, enum_name=enum_name, str=str)
-
-
-def enum_in_template(value, name, field):
-    in_tmpl = """
-    {%- if value['in'] %}
-    if {{ name }} not in {{ value['in'] }}:
-        raise ValidationFailed(\"{{ name }} not in {{ enum_names(field, value['in']) }}\")
-    {%- endif -%}
-    {%- if value['not_in'] %}
-    if {{ name }} in {{ value['not_in'] }}:
-        raise ValidationFailed(\"{{ name }} in {{ enum_names(field, value['not_in']) }}\")
-    {%- endif -%}
-    """
-    return Template(in_tmpl).render(value=value, name=name, field=field, enum_names=enum_names)
-
-
-def enum_template(option_value, name, field):
-    enum_tmpl = """
-    {{ enum_const_template(option_value.enum, name, field) -}}
-    {{ enum_in_template(option_value.enum, name, field) -}}
-    {% if option_value.enum['defined_only'] %}
-    if {{ name }} not in {{ enum_values(field) }}:
-        raise ValidationFailed(\"{{ name }} is not defined\")
-    {% endif %}
-    """
-    return Template(enum_tmpl).render(option_value=option_value, name=name, enum_const_template=enum_const_template,
-                                      enum_in_template=enum_in_template, field=field, enum_values=enum_values)
-
-
-def any_template(option_value, name, repeated=False):
-    any_tmpl = """
-    {{- required_template(o, name) }}
-    {%- if o['in'] %}
-    {% if repeated %}
-    if {{ name }}:
-    {% else %}
-    if _has_field(p, \"{{ name.split('.')[-1] }}\"):
-    {% endif %}
-        if {{ name }}.type_url not in {{ o['in'] }}:
-            raise ValidationFailed(\"{{ name }} not in {{ o['in'] }}\")
-    {%- endif %}
-    {%- if o['not_in'] %}
-    {% if repeated %}
-    if {{ name }}:
-    {% else %}
-    if _has_field(p, \"{{ name.split('.')[-1] }}\"):
-    {% endif %}
-        if {{ name }}.type_url in {{ o['not_in'] }}:
-            raise ValidationFailed(\"{{ name }} in {{ o['not_in'] }}\")
-    {%- endif %}
-    """
-    return Template(any_tmpl).render(
-        o=option_value.any, name=name, required_template=required_template, repeated=repeated)
-
-
-def bytes_template(option_value, name):
-    bytes_tmpl = """
-    {% set i = 0 %}
-    {%- if b['ignore_empty'] %}
-    if {{ name }}:
-    {% set i = 4 %}
-    {%- endif -%}
-    {% filter indent(i,True) %}
-    {{ const_template(o, name) -}}
-    {{ in_template(o.bytes, name) -}}
-    {%- if b['len'] %}
-    if len({{ name }}) != {{ b['len'] }}:
-        raise ValidationFailed(\"{{ name }} length does not equal {{ b['len'] }}\")
-    {%- endif -%}
-    {%- if b['min_len'] %}
-    if len({{ name }}) < {{ b['min_len'] }}:
-        raise ValidationFailed(\"{{ name }} length is less than {{ b['min_len'] }}\")
-    {%- endif -%}
-    {%- if b['max_len'] %}
-    if len({{ name }}) > {{ b['max_len'] }}:
-        raise ValidationFailed(\"{{ name }} length is more than {{ b['max_len'] }}\")
-    {%- endif -%}
-    {%- if b['ip'] %}
-    try:
-        ip_address({{ name }})
-    except ValueError:
-        raise ValidationFailed(\"{{ name }} is not a valid ip\")
-    {%- endif -%}
-    {%- if b['ipv4'] %}
-    try:
-        IPv4Address({{ name }})
-    except ValueError:
-        raise ValidationFailed(\"{{ name }} is not a valid ipv4\")
-    {%- endif -%}
-    {%- if b['ipv6'] %}
-    try:
-        IPv6Address({{ name }})
-    except ValueError:
-        raise ValidationFailed(\"{{ name }} is not a valid ipv6\")
-    {%- endif -%}
-    {% if b['pattern'] %}
-        {% if sys.version_info[0] >= 3%}
-    if re.search({{ b['pattern'].encode('unicode-escape') }}, {{ name }}) is None:
-        raise ValidationFailed(\"{{ name }} pattern does not match b['pattern'].encode('unicode-escape')\")
-        {% else %}
-    if re.search(b\"{{ b['pattern'].encode('unicode-escape') }}\", {{ name }}) is None:
-        raise ValidationFailed(\"{{ name }} pattern does not match \")
-        {% endif %}
-    {% endif %}
-    {% if b['contains'] %}
-        {% if sys.version_info[0] >= 3 %}
-    if not {{ b['contains'] }} in {{ name }}:
-        raise ValidationFailed(\"{{ name }} does not contain {{ b['contains'] }}\")
-        {% else %}
-    if not b\"{{ b['contains'].encode('string_escape') }}\" in {{ name }}:
-        raise ValidationFailed(\"{{ name }} does not contain \")
-        {% endif %}
-    {% endif %}
-    {% if b['prefix'] %}
-        {% if sys.version_info[0] >= 3 %}
-    if not {{ name }}.startswith({{ b['prefix'] }}):
-        raise ValidationFailed(\"{{ name }} does not start with prefix {{ b['prefix'] }}\")
-        {% else %}
-    if not {{name}}.startswith(b\"{{ b['prefix'].encode('string_escape') }}\"):
-        raise ValidationFailed(\"{{ name }} does not start with prefix {{ b['prefix'].encode('string_escape') }}\")
-        {% endif %}
-    {% endif %}
-    {% if b['suffix'] %}
-        {% if sys.version_info[0] >= 3 %}
-    if not {{ name }}.endswith({{ b['suffix'] }}):
-        raise ValidationFailed(\"{{ name }} does not end with suffix {{ b['suffix'] }}\")
-        {% else %}
-    if not {{name}}.endswith(b\"{{ b['suffix'].encode('string_escape') }}\"):
-        raise ValidationFailed(\"{{ name }} does not end with suffix {{ b['suffix'] }}\")
-        {% endif %}
-    {% endif %}
-    {% endfilter %}
-    """
-    return Template(bytes_tmpl).render(sys=sys, o=option_value, name=name,
-                                       const_template=const_template, in_template=in_template, b=option_value.bytes)
-
-
-def switcher_template(accessor, name, field, map=False):
-    switcher_tmpl = """
-    {%- if str(accessor.float) %}
-    {{- num_template(accessor, name, accessor.float)|indent(4,True) -}}
-    {%- elif str(accessor.double) %}
-    {{- num_template(accessor, name, accessor.double)|indent(4,True) -}}
-    {%- elif str(accessor.int32) %}
-    {{- num_template(accessor, name, accessor.int32)|indent(4,True) -}}
-    {%- elif str(accessor.int64) %}
-    {{- num_template(accessor, name, accessor.int64)|indent(4,True) -}}
-    {%- elif str(accessor.uint32) %}
-    {{- num_template(accessor, name, accessor.uint32)|indent(4,True) -}}
-    {%- elif str(accessor.uint64) %}
-    {{- num_template(accessor, name, accessor.uint64)|indent(4,True) -}}
-    {%- elif str(accessor.sint32) %}
-    {{- num_template(accessor, name, accessor.sint32)|indent(4,True) -}}
-    {%- elif str(accessor.sint64) %}
-    {{- num_template(accessor, name, accessor.sint64)|indent(4,True) -}}
-    {%- elif str(accessor.fixed32) %}
-    {{- num_template(accessor, name, accessor.fixed32)|indent(4,True) -}}
-    {%- elif str(accessor.fixed64) %}
-    {{- num_template(accessor, name, accessor.fixed64)|indent(4,True) -}}
-    {%- elif str(accessor.sfixed32) %}
-    {{- num_template(accessor, name, accessor.sfixed32)|indent(4,True) -}}
-    {%- elif str(accessor.sfixed64) %}
-    {{- num_template(accessor, name, accessor.sfixed64)|indent(4,True) -}}
-    {%- elif str(accessor.bool) %}
-    {{- bool_template(accessor, name)|indent(4,True) -}}
-    {%- elif str(accessor.string) %}
-    {{- string_template(accessor, name)|indent(4,True) -}}
-    {%- elif str(accessor.enum) and map %}
-    {{- enum_template(accessor, name, field.message_type.fields[1])|indent(4,True) -}}
-    {%- elif str(accessor.enum) and not map %}
-    {{- enum_template(accessor, name, field)|indent(4,True) -}}
-    {%- elif str(accessor.duration) %}
-    {{- duration_template(accessor, name, True)|indent(4,True) -}}
-    {%- elif str(accessor.timestamp) %}
-    {{- timestamp_template(accessor, name, True)|indent(4,True) -}}
-    {%- elif str(accessor.message) %}
-    {{- message_template(accessor, name, True)|indent(4,True) -}}
-    {%- elif str(accessor.any) %}
-    {{- any_template(accessor, name, True)|indent(4,True) -}}
-    {%- elif str(accessor.message) %}
-    {{- message_template(accessor, name, True)|indent(4,True) -}}
-    {%- endif %}
-    """
-    return Template(switcher_tmpl).render(accessor=accessor, name=name, str=str, num_template=num_template,
-                                          bool_template=bool_template, string_template=string_template,
-                                          enum_template=enum_template, duration_template=duration_template,
-                                          timestamp_template=timestamp_template, any_template=any_template,
-                                          message_template=message_template, field=field, map=map)
-
-
-def repeated_template(option_value, name, field):
-    rep_tmpl = """
-    {% set i = 0 %}
-    {%- if o and o.repeated['ignore_empty'] %}
-    if {{ name }}:
-    {% set i = 4 %}
-    {%- endif -%}
-    {% filter indent(i,True) %}
-    {%- if o and o.repeated['min_items'] %}
-    if len({{ name }}) < {{ o.repeated['min_items'] }}:
-        raise ValidationFailed(\"{{ name }} needs to contain at least {{ o.repeated['min_items'] }} items\")
-    {%- endif %}
-    {%- if o and o.repeated['max_items'] %}
-    if len({{ name }}) > {{ o.repeated['max_items'] }}:
-        raise ValidationFailed(\"{{ name }} needs to contain at most {{ o.repeated['max_items'] }} items\")
-    {%- endif %}
-    {%- if o and o.repeated['unique'] %}
-    seen = set()
-    for item in {{ name }}:
-        if item in seen:
-            raise ValidationFailed(\"{{ name }} must contain unique items. %s has been repeated.\" %item)
-        else:
-            seen.add(item)
-    {%- endif %}
-    {%- if message_type %}
-    for item in {{ name }}:
-        {%- if o and o.repeated and o.repeated.items.message.skip %}
-        pass
-        {% else %}
-        validate(item)
-        {% endif %}
-    {%- endif %}
-    {%- if o and str(o.repeated['items']) %}
-    for item in {{ name }}:
-        {%- set accessor = o.repeated['items'] -%}
-        {{ switcher_template(accessor, 'item', field) }}
-        pass
-    {%- endif %}
-    {% endfilter %}
-    """
-    return Template(rep_tmpl).render(o=option_value, name=name, message_type=field.message_type,
-                                     str=str, field=field, switcher_template=switcher_template)
-
-
-def is_map(field):
-    return field.label == 3 and field.message_type and len(field.message_type.fields) == 2 and \
-        field.message_type.fields[0].name == "key" and field.message_type.fields[1].name == "value"
-
-
-def map_template(option_value, name, field):
-    map_tmpl = """
-    {% set i = 0 %}
-    {%- if o and o.map['ignore_empty'] %}
-    if {{ name }}:
-    {% set i = 4 %}
-    {%- endif -%}
-    {% filter indent(i,True) %}
-    {%- if o and o.map['min_pairs'] %}
-    if len({{ name }}) < {{ o.map['min_pairs'] }}:
-        raise ValidationFailed(\"{{ name }} needs to contain at least {{ o.map['min_pairs'] }} items\")
-    {%- endif %}
-    {%- if o and o.map['max_pairs'] %}
-    if len({{ name }}) > {{ o.map['max_pairs'] }}:
-        raise ValidationFailed(\"{{ name }} can contain at most {{ o.map['max_pairs'] }} items\")
-    {%- endif %}
-    {%- if o and (str(o.map['keys']) or str(o.map['values']))%}
-    for key in {{ name }}:
-        {%- set keys = o.map['keys'] -%}
-        {%- set values = o.map['values'] -%}
-        {%- if str(keys.double) %}
-        {{- num_template(keys, 'key', keys.double)|indent(4,True) -}}
-        {%- elif str(keys.int32) %}
-        {{- num_template(keys, 'key', keys.int32)|indent(4,True) -}}
-        {%- elif str(keys.int64) %}
-        {{- num_template(keys, 'key', keys.int64)|indent(4,True) -}}
-        {%- elif str(keys.uint32) %}
-        {{- num_template(keys, 'key', keys.uint32)|indent(4,True) -}}
-        {%- elif str(keys.uint64) %}
-        {{- num_template(keys, 'key', keys.uint64)|indent(4,True) -}}
-        {%- elif str(keys.sint32) %}
-        {{- num_template(keys, 'key', keys.sint32)|indent(4,True) -}}
-        {%- elif str(keys.sint64) %}
-        {{- num_template(keys, 'key', keys.sint64)|indent(4,True) -}}
-        {%- elif str(keys.fixed32) %}
-        {{- num_template(keys, 'key', keys.fixed32)|indent(4,True) -}}
-        {%- elif str(keys.fixed64) %}
-        {{- num_template(keys, 'key', keys.fixed64)|indent(4,True) -}}
-        {%- elif str(keys.sfixed32) %}
-        {{- num_template(keys, 'key', keys.sfixed32)|indent(4,True) -}}
-        {%- elif str(keys.sfixed64) %}
-        {{- num_template(keys, 'key', keys.sfixed64)|indent(4,True) -}}
-        {%- elif str(keys.bool) %}
-        {{- bool_template(keys, 'key')|indent(4,True) -}}
-        {%- elif str(keys.string) %}
-        {{- string_template(keys, 'key')|indent(4,True) -}}
-        {%- endif %}
-        {%- set values = o.map['values'] -%}
-        {{ switcher_template(values, name +'[key]', field, True) }}
-        pass
-    {%- elif field.message_type.fields[1].message_type %}
-    for key in {{ name }}:
-        validate({{ name }}[key])
-    {%- endif %}
-    {% endfilter %}
-    """
-    return Template(map_tmpl).render(o=option_value, name=name, message_type=field.message_type, str=str,
-                                     field=field, switcher_template=switcher_template, num_template=num_template,
-                                     string_template=string_template, bool_template=bool_template)
-
-
-def rule_type(field):
-    name = "p." + field.name
-    if has_validate(field) and field.message_type is None:
-        for option_descriptor, option_value in field.GetOptions().ListFields():
-            if option_descriptor.full_name == "validate.rules":
-                if str(option_value.string):
-                    return string_template(option_value, name)
-                elif str(option_value.message):
-                    return message_template(option_value, field.name)
-                elif str(option_value.bool):
-                    return bool_template(option_value, name)
-                elif str(option_value.float):
-                    return num_template(option_value, name, option_value.float)
-                elif str(option_value.double):
-                    return num_template(option_value, name, option_value.double)
-                elif str(option_value.int32):
-                    return num_template(option_value, name, option_value.int32)
-                elif str(option_value.int64):
-                    return num_template(option_value, name, option_value.int64)
-                elif str(option_value.uint32):
-                    return num_template(option_value, name, option_value.uint32)
-                elif str(option_value.uint64):
-                    return num_template(option_value, name, option_value.uint64)
-                elif str(option_value.sint32):
-                    return num_template(option_value, name, option_value.sint32)
-                elif str(option_value.sint64):
-                    return num_template(option_value, name, option_value.sint64)
-                elif str(option_value.fixed32):
-                    return num_template(option_value, name, option_value.fixed32)
-                elif str(option_value.fixed64):
-                    return num_template(option_value, name, option_value.fixed64)
-                elif str(option_value.sfixed32):
-                    return num_template(option_value, name, option_value.sfixed32)
-                elif str(option_value.sfixed64):
-                    return num_template(option_value, name, option_value.sfixed64)
-                elif str(option_value.enum):
-                    return enum_template(option_value, name, field)
-                elif str(option_value.bytes):
-                    return bytes_template(option_value, name)
-                elif str(option_value.repeated):
-                    return repeated_template(option_value, name, field)
-                elif str(option_value.map):
-                    return map_template(option_value, name, field)
-                elif str(option_value.required):
-                    return required_template(option_value, name)
-    if field.message_type:
-        for option_descriptor, option_value in field.GetOptions().ListFields():
-            if option_descriptor.full_name == "validate.rules":
-                if str(option_value.duration):
-                    return duration_template(option_value, name)
-                elif str(option_value.timestamp):
-                    return timestamp_template(option_value, name)
-                elif str(option_value.float) or str(option_value.int32) or str(option_value.int64) or \
-                        str(option_value.double) or str(option_value.uint32) or str(option_value.uint64) or \
-                        str(option_value.bool) or str(option_value.string) or str(option_value.bytes):
-                    return wrapper_template(option_value, name)
-                elif str(option_value.message) != "":
-                    return message_template(option_value, field.name)
-                elif str(option_value.any):
-                    return any_template(option_value, name)
-                elif str(option_value.repeated):
-                    return repeated_template(option_value, name, field)
-                elif str(option_value.map):
-                    return map_template(option_value, name, field)
-                elif str(option_value.required):
-                    return required_template(option_value, name)
-        if field.message_type.full_name.startswith("google.protobuf"):
-            return ""
-        elif is_map(field):
-            return map_template(None, name, field)
-        elif field.label == 3:
-            return repeated_template(None, name, field)
-        else:
-            return message_template(None, field.name)
-    return ""
-
-
-def file_template(proto_message):
-    file_tmp = """
-# Validates {{ p.DESCRIPTOR.name }}
-def generate_validate(p):
-    {%- for option_descriptor, option_value in p.DESCRIPTOR.GetOptions().ListFields() %}
-        {%- if option_descriptor.full_name == "validate.disabled" and option_value %}
-    return None
-        {%- elif option_descriptor.full_name == "validate.ignored" and option_value %}
-    return None
-        {%- endif -%}
-    {%- endfor -%}
-    {%- for oneof in p.DESCRIPTOR.oneofs %}
-    present = False
-        {%- for field in oneof.fields %}
-    if _has_field(p, \"{{ field.name }}\"):
-        present = True
-        {{ rule_type(field)|indent(4,True) }}
-        {%- endfor %}
-        {% for option in oneof.GetOptions().ListFields() %}
-        {% if option[0].name == 'required' and option[1] %}
-    if not present:
-        raise ValidationFailed(\"Oneof {{ oneof.name }} is required\")
-        {% endif %}
-        {% endfor %}
-    {%- endfor %}
-    {%- for field in p.DESCRIPTOR.fields -%}
-        {%- if not field.containing_oneof %}
-    {{ rule_type(field) -}}
-        {%- endif %}
-    {%- endfor %}
-    return None"""
-    return Template(file_tmp).render(rule_type=rule_type, p=proto_message)
diff -ruN 1/python/pyproject.toml 2/python/pyproject.toml
--- 1/python/pyproject.toml	2023-08-08 23:12:25.336238550 +0000
+++ 2/python/pyproject.toml	1970-01-01 00:00:00.000000000 +0000
@@ -1,8 +0,0 @@
-[build-system]
-requires = [
-    "setuptools>=45",
-    "setuptools_scm[toml]>=6.2",
-    "wheel>=0.38.1"
-]
-build-backend = "setuptools.build_meta"
-[tool.setuptools_scm]
diff -ruN 1/python/requirements.in 2/python/requirements.in
--- 1/python/requirements.in	2023-08-08 23:12:25.340238486 +0000
+++ 2/python/requirements.in	1970-01-01 00:00:00.000000000 +0000
@@ -1,7 +0,0 @@
-# These must be the same as the requirements listed in
-# install_requires section of setup.cfg. A test checks for this.
-# See requirements_test.py for more context.
-validate-email>=1.3
-Jinja2>=2.11.1
-protobuf>=3.6.1
-astunparse>=1.6.3
diff -ruN 1/python/setup.cfg 2/python/setup.cfg
--- 1/python/setup.cfg	2023-08-08 23:12:25.344238423 +0000
+++ 2/python/setup.cfg	1970-01-01 00:00:00.000000000 +0000
@@ -1,33 +0,0 @@
-[metadata]
-name = protoc-gen-validate
-version = env: SETUPTOOLS_SCM_PRETEND_VERSION
-author = Buf
-author_email = dev@buf.build
-description = PGV for python via just-in-time code generation
-long_description = file: README.md
-long_description_content_type = text/markdown
-url = https://github.com/bufbuild/protoc-gen-validate
-license_files = LICENSE
-classifiers =
-    Programming Language :: Python :: 3
-    Programming Language :: Python :: 3 :: Only
-    Programming Language :: Python :: 3.6
-    Programming Language :: Python :: 3.7
-    Programming Language :: Python :: 3.8
-
-[options]
-packages = find:
-install_requires =
-    validate-email>=1.3
-    Jinja2>=2.11.1
-    protobuf>=3.6.1
-    astunparse>=1.6.3
-python_requires = >=3.6
-
-[options.data_files]
-data = validate.proto
-
-[flake8]
-max-line-length = 120
-ignore =
-    F401  # unused imports
diff -ruN 1/validate/BUILD.in 2/validate/BUILD.in
--- 1/validate/BUILD.in	1970-01-01 00:00:00.000000000 +0000
+++ 2/validate/BUILD.in	2023-08-08 23:19:09.105795813 +0000
@@ -0,0 +1,4 @@
+exports_files([
+    "validate.h",
+    "validate.proto",
+])
diff -ruN 1/windows/bazel.rc 2/windows/bazel.rc
--- 1/windows/bazel.rc	2023-08-08 23:12:25.640233691 +0000
+++ 2/windows/bazel.rc	1970-01-01 00:00:00.000000000 +0000
@@ -1 +0,0 @@
-build --verbose_failures
diff -ruN 1/windows/ci.ps1 2/windows/ci.ps1
--- 1/windows/ci.ps1	2023-08-08 23:12:25.644233626 +0000
+++ 2/windows/ci.ps1	1970-01-01 00:00:00.000000000 +0000
@@ -1,7 +0,0 @@
-$ErrorActionPreference = "Stop";
-trap { $host.SetShouldExit(1) }
-
-#bazel-harness
-# runs the test harness via bazel
-bazel "--output_base=c:\_pgv" "--bazelrc=windows\bazel.rc" run //tests/harness/executor:executor
-exit $LASTEXITCODE
